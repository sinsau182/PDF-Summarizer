"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@octoai";
exports.ids = ["vendor-chunks/@octoai"];
exports.modules = {

/***/ "(rsc)/./node_modules/@octoai/client/build/module/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LIB_VERSION = exports.TEXT_MODELS = exports.CompletionsAPI = exports.LoraTuneInput = exports.CreateTuneRequest = exports.ListTunesRequest = exports.FineTuningClient = exports.ListAssetsRequest = exports.CreateAssetRequest = exports.AssetLibrary = exports.Stream = exports.OctoAIValidationError = exports.OctoAITimeoutError = exports.OctoAIServerError = exports.OctoAIClientError = exports.ChatCompletionCreateRequest = exports.Completions = exports.Chat = exports.Client = void 0;\nvar client_1 = __webpack_require__(/*! ./lib/client */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/client.js\");\nObject.defineProperty(exports, \"Client\", ({ enumerable: true, get: function () { return client_1.Client; } }));\nvar chat_1 = __webpack_require__(/*! ./lib/chat */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/chat.js\");\nObject.defineProperty(exports, \"Chat\", ({ enumerable: true, get: function () { return chat_1.Chat; } }));\nObject.defineProperty(exports, \"Completions\", ({ enumerable: true, get: function () { return chat_1.Completions; } }));\nObject.defineProperty(exports, \"ChatCompletionCreateRequest\", ({ enumerable: true, get: function () { return chat_1.ChatCompletionCreateRequest; } }));\nvar error_1 = __webpack_require__(/*! ./lib/error */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/error.js\");\nObject.defineProperty(exports, \"OctoAIClientError\", ({ enumerable: true, get: function () { return error_1.OctoAIClientError; } }));\nObject.defineProperty(exports, \"OctoAIServerError\", ({ enumerable: true, get: function () { return error_1.OctoAIServerError; } }));\nObject.defineProperty(exports, \"OctoAITimeoutError\", ({ enumerable: true, get: function () { return error_1.OctoAITimeoutError; } }));\nObject.defineProperty(exports, \"OctoAIValidationError\", ({ enumerable: true, get: function () { return error_1.OctoAIValidationError; } }));\nvar stream_1 = __webpack_require__(/*! ./lib/stream */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/stream.js\");\nObject.defineProperty(exports, \"Stream\", ({ enumerable: true, get: function () { return stream_1.Stream; } }));\nvar asset_1 = __webpack_require__(/*! ./lib/asset */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/asset.js\");\nObject.defineProperty(exports, \"AssetLibrary\", ({ enumerable: true, get: function () { return asset_1.AssetLibrary; } }));\nObject.defineProperty(exports, \"CreateAssetRequest\", ({ enumerable: true, get: function () { return asset_1.CreateAssetRequest; } }));\nObject.defineProperty(exports, \"ListAssetsRequest\", ({ enumerable: true, get: function () { return asset_1.ListAssetsRequest; } }));\nvar tune_1 = __webpack_require__(/*! ./lib/tune */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/tune.js\");\nObject.defineProperty(exports, \"FineTuningClient\", ({ enumerable: true, get: function () { return tune_1.FineTuningClient; } }));\nObject.defineProperty(exports, \"ListTunesRequest\", ({ enumerable: true, get: function () { return tune_1.ListTunesRequest; } }));\nObject.defineProperty(exports, \"CreateTuneRequest\", ({ enumerable: true, get: function () { return tune_1.CreateTuneRequest; } }));\nObject.defineProperty(exports, \"LoraTuneInput\", ({ enumerable: true, get: function () { return tune_1.LoraTuneInput; } }));\nvar completions_1 = __webpack_require__(/*! ./lib/completions */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/completions.js\");\nObject.defineProperty(exports, \"CompletionsAPI\", ({ enumerable: true, get: function () { return completions_1.CompletionsAPI; } }));\nvar constants_1 = __webpack_require__(/*! ./lib/constants */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/constants.js\");\nObject.defineProperty(exports, \"TEXT_MODELS\", ({ enumerable: true, get: function () { return constants_1.TEXT_MODELS; } }));\nvar version_1 = __webpack_require__(/*! ./version */ \"(rsc)/./node_modules/@octoai/client/build/module/version.js\");\nObject.defineProperty(exports, \"LIB_VERSION\", ({ enumerable: true, get: function () { return version_1.LIB_VERSION; } }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQWdGO0FBQXZFLGdHQUFBLE1BQU0sT0FBQTtBQUNmLG1DQVFvQjtBQVBsQiw0RkFBQSxJQUFJLE9BQUE7QUFDSixtR0FBQSxXQUFXLE9BQUE7QUFHWCxtSEFBQSwyQkFBMkIsT0FBQTtBQU03QixxQ0FLcUI7QUFKbkIsMEdBQUEsaUJBQWlCLE9BQUE7QUFDakIsMEdBQUEsaUJBQWlCLE9BQUE7QUFDakIsMkdBQUEsa0JBQWtCLE9BQUE7QUFDbEIsOEdBQUEscUJBQXFCLE9BQUE7QUFFdkIsdUNBQXNDO0FBQTdCLGdHQUFBLE1BQU0sT0FBQTtBQUlmLHFDQU1xQjtBQUxuQixxR0FBQSxZQUFZLE9BQUE7QUFDWiwyR0FBQSxrQkFBa0IsT0FBQTtBQUVsQiwwR0FBQSxpQkFBaUIsT0FBQTtBQXFCbkIsbUNBS29CO0FBSmxCLHdHQUFBLGdCQUFnQixPQUFBO0FBQ2hCLHdHQUFBLGdCQUFnQixPQUFBO0FBQ2hCLHlHQUFBLGlCQUFpQixPQUFBO0FBQ2pCLHFHQUFBLGFBQWEsT0FBQTtBQVlmLGlEQUkyQjtBQUh6Qiw2R0FBQSxjQUFjLE9BQUE7QUFNaEIsNkNBQThDO0FBQXJDLHdHQUFBLFdBQVcsT0FBQTtBQUNwQixxQ0FBd0M7QUFBL0Isc0dBQUEsV0FBVyxPQUFBIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9jdG9haS9jbGllbnQvYnVpbGQvbW9kdWxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLG1CQUFtQixHQUFHLHNCQUFzQixHQUFHLHFCQUFxQixHQUFHLHlCQUF5QixHQUFHLHdCQUF3QixHQUFHLHdCQUF3QixHQUFHLHlCQUF5QixHQUFHLDBCQUEwQixHQUFHLG9CQUFvQixHQUFHLGNBQWMsR0FBRyw2QkFBNkIsR0FBRywwQkFBMEIsR0FBRyx5QkFBeUIsR0FBRyx5QkFBeUIsR0FBRyxtQ0FBbUMsR0FBRyxtQkFBbUIsR0FBRyxZQUFZLEdBQUcsY0FBYztBQUM5ZCxlQUFlLG1CQUFPLENBQUMsb0ZBQWM7QUFDckMsMENBQXlDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzVHLGFBQWEsbUJBQU8sQ0FBQyxnRkFBWTtBQUNqQyx3Q0FBdUMsRUFBRSxxQ0FBcUMsdUJBQXVCLEVBQUM7QUFDdEcsK0NBQThDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ3BILCtEQUE4RCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUNwSixjQUFjLG1CQUFPLENBQUMsa0ZBQWE7QUFDbkMscURBQW9ELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQ2pJLHFEQUFvRCxFQUFFLHFDQUFxQyxxQ0FBcUMsRUFBQztBQUNqSSxzREFBcUQsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDbkkseURBQXdELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ3pJLGVBQWUsbUJBQU8sQ0FBQyxvRkFBYztBQUNyQywwQ0FBeUMsRUFBRSxxQ0FBcUMsMkJBQTJCLEVBQUM7QUFDNUcsY0FBYyxtQkFBTyxDQUFDLGtGQUFhO0FBQ25DLGdEQUErQyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUN2SCxzREFBcUQsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDbkkscURBQW9ELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQ2pJLGFBQWEsbUJBQU8sQ0FBQyxnRkFBWTtBQUNqQyxvREFBbUQsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDOUgsb0RBQW1ELEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQzlILHFEQUFvRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUNoSSxpREFBZ0QsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDeEgsb0JBQW9CLG1CQUFPLENBQUMsOEZBQW1CO0FBQy9DLGtEQUFpRCxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUNqSSxrQkFBa0IsbUJBQU8sQ0FBQywwRkFBaUI7QUFDM0MsK0NBQThDLEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQ3pILGdCQUFnQixtQkFBTyxDQUFDLDhFQUFXO0FBQ25DLCtDQUE4QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUN2SCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvQG9jdG9haS9jbGllbnQvYnVpbGQvbW9kdWxlL2luZGV4LmpzP2Q4NDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxJQl9WRVJTSU9OID0gZXhwb3J0cy5URVhUX01PREVMUyA9IGV4cG9ydHMuQ29tcGxldGlvbnNBUEkgPSBleHBvcnRzLkxvcmFUdW5lSW5wdXQgPSBleHBvcnRzLkNyZWF0ZVR1bmVSZXF1ZXN0ID0gZXhwb3J0cy5MaXN0VHVuZXNSZXF1ZXN0ID0gZXhwb3J0cy5GaW5lVHVuaW5nQ2xpZW50ID0gZXhwb3J0cy5MaXN0QXNzZXRzUmVxdWVzdCA9IGV4cG9ydHMuQ3JlYXRlQXNzZXRSZXF1ZXN0ID0gZXhwb3J0cy5Bc3NldExpYnJhcnkgPSBleHBvcnRzLlN0cmVhbSA9IGV4cG9ydHMuT2N0b0FJVmFsaWRhdGlvbkVycm9yID0gZXhwb3J0cy5PY3RvQUlUaW1lb3V0RXJyb3IgPSBleHBvcnRzLk9jdG9BSVNlcnZlckVycm9yID0gZXhwb3J0cy5PY3RvQUlDbGllbnRFcnJvciA9IGV4cG9ydHMuQ2hhdENvbXBsZXRpb25DcmVhdGVSZXF1ZXN0ID0gZXhwb3J0cy5Db21wbGV0aW9ucyA9IGV4cG9ydHMuQ2hhdCA9IGV4cG9ydHMuQ2xpZW50ID0gdm9pZCAwO1xudmFyIGNsaWVudF8xID0gcmVxdWlyZShcIi4vbGliL2NsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xpZW50XzEuQ2xpZW50OyB9IH0pO1xudmFyIGNoYXRfMSA9IHJlcXVpcmUoXCIuL2xpYi9jaGF0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2hhdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhdF8xLkNoYXQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb21wbGV0aW9uc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhdF8xLkNvbXBsZXRpb25zOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2hhdENvbXBsZXRpb25DcmVhdGVSZXF1ZXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjaGF0XzEuQ2hhdENvbXBsZXRpb25DcmVhdGVSZXF1ZXN0OyB9IH0pO1xudmFyIGVycm9yXzEgPSByZXF1aXJlKFwiLi9saWIvZXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPY3RvQUlDbGllbnRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JfMS5PY3RvQUlDbGllbnRFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9jdG9BSVNlcnZlckVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcl8xLk9jdG9BSVNlcnZlckVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT2N0b0FJVGltZW91dEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcl8xLk9jdG9BSVRpbWVvdXRFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9jdG9BSVZhbGlkYXRpb25FcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JfMS5PY3RvQUlWYWxpZGF0aW9uRXJyb3I7IH0gfSk7XG52YXIgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi9saWIvc3RyZWFtXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RyZWFtXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdHJlYW1fMS5TdHJlYW07IH0gfSk7XG52YXIgYXNzZXRfMSA9IHJlcXVpcmUoXCIuL2xpYi9hc3NldFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzc2V0TGlicmFyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNzZXRfMS5Bc3NldExpYnJhcnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDcmVhdGVBc3NldFJlcXVlc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFzc2V0XzEuQ3JlYXRlQXNzZXRSZXF1ZXN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTGlzdEFzc2V0c1JlcXVlc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFzc2V0XzEuTGlzdEFzc2V0c1JlcXVlc3Q7IH0gfSk7XG52YXIgdHVuZV8xID0gcmVxdWlyZShcIi4vbGliL3R1bmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGaW5lVHVuaW5nQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0dW5lXzEuRmluZVR1bmluZ0NsaWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxpc3RUdW5lc1JlcXVlc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR1bmVfMS5MaXN0VHVuZXNSZXF1ZXN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ3JlYXRlVHVuZVJlcXVlc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR1bmVfMS5DcmVhdGVUdW5lUmVxdWVzdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxvcmFUdW5lSW5wdXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR1bmVfMS5Mb3JhVHVuZUlucHV0OyB9IH0pO1xudmFyIGNvbXBsZXRpb25zXzEgPSByZXF1aXJlKFwiLi9saWIvY29tcGxldGlvbnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb21wbGV0aW9uc0FQSVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tcGxldGlvbnNfMS5Db21wbGV0aW9uc0FQSTsgfSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2xpYi9jb25zdGFudHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJURVhUX01PREVMU1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uc3RhbnRzXzEuVEVYVF9NT0RFTFM7IH0gfSk7XG52YXIgdmVyc2lvbl8xID0gcmVxdWlyZShcIi4vdmVyc2lvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxJQl9WRVJTSU9OXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2ZXJzaW9uXzEuTElCX1ZFUlNJT047IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNkVU5CUVdkR08wRkJRWFpGTEdkSFFVRkJMRTFCUVUwc1QwRkJRVHRCUVVObUxHMURRVkZ2UWp0QlFWQnNRaXcwUmtGQlFTeEpRVUZKTEU5QlFVRTdRVUZEU2l4dFIwRkJRU3hYUVVGWExFOUJRVUU3UVVGSFdDeHRTRUZCUVN3eVFrRkJNa0lzVDBGQlFUdEJRVTAzUWl4eFEwRkxjVUk3UVVGS2JrSXNNRWRCUVVFc2FVSkJRV2xDTEU5QlFVRTdRVUZEYWtJc01FZEJRVUVzYVVKQlFXbENMRTlCUVVFN1FVRkRha0lzTWtkQlFVRXNhMEpCUVd0Q0xFOUJRVUU3UVVGRGJFSXNPRWRCUVVFc2NVSkJRWEZDTEU5QlFVRTdRVUZGZGtJc2RVTkJRWE5ETzBGQlFUZENMR2RIUVVGQkxFMUJRVTBzVDBGQlFUdEJRVWxtTEhGRFFVMXhRanRCUVV4dVFpeHhSMEZCUVN4WlFVRlpMRTlCUVVFN1FVRkRXaXd5UjBGQlFTeHJRa0ZCYTBJc1QwRkJRVHRCUVVWc1Fpd3dSMEZCUVN4cFFrRkJhVUlzVDBGQlFUdEJRWEZDYmtJc2JVTkJTMjlDTzBGQlNteENMSGRIUVVGQkxHZENRVUZuUWl4UFFVRkJPMEZCUTJoQ0xIZEhRVUZCTEdkQ1FVRm5RaXhQUVVGQk8wRkJRMmhDTEhsSFFVRkJMR2xDUVVGcFFpeFBRVUZCTzBGQlEycENMSEZIUVVGQkxHRkJRV0VzVDBGQlFUdEJRVmxtTEdsRVFVa3lRanRCUVVoNlFpdzJSMEZCUVN4alFVRmpMRTlCUVVFN1FVRk5hRUlzTmtOQlFUaERPMEZCUVhKRExIZEhRVUZCTEZkQlFWY3NUMEZCUVR0QlFVTndRaXh4UTBGQmQwTTdRVUZCTDBJc2MwZEJRVUVzVjBGQlZ5eFBRVUZCSW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/lib/asset.js":
/*!***************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/lib/asset.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AssetLibrary = exports.ListAssetsRequest = exports.CreateAssetRequest = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst client_s3_1 = __webpack_require__(/*! @aws-sdk/client-s3 */ \"@aws-sdk/client-s3\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/error.js\");\n/**\n * Request for creating an asset.\n *\n * @remarks\n * This is used with {@link AssetLibrary.create}.  The `data` field requires\n * data from the matching asset_type.  This includes {@link FileData},\n * {@link CheckpointData}, {@link LoraData}, {@link VAEData},\n * and {@link TextualInversionData}.\n */\nclass CreateAssetRequest {\n    constructor(request) {\n        this.asset_type = request.asset_type;\n        this.data = request.data;\n        this.name = request.name;\n        this.description = request.description;\n        const processedRequest = Object.keys(request).reduce((acc, key) => request[key] === undefined\n            ? { ...acc }\n            : { ...acc, [key]: request[key] }, {});\n        Object.assign(this, processedRequest);\n    }\n}\nexports.CreateAssetRequest = CreateAssetRequest;\nclass ListAssetsRequest {\n    constructor(request) {\n        const processedRequest = Object.keys(request).reduce((acc, key) => request[key] === undefined\n            ? { ...acc }\n            : { ...acc, [key]: request[key] }, {});\n        Object.assign(this, processedRequest);\n    }\n}\nexports.ListAssetsRequest = ListAssetsRequest;\n/**\n * The AssetLibrary class.  Generally accessed through the client through\n * `client.asset`, but can be instantiated directly if a different endpoint is\n * desired.\n */\nclass AssetLibrary {\n    constructor(client, endpoint) {\n        this.client = client;\n        if (!endpoint) {\n            endpoint = `${this.client.secureLink ? constants_1.SECURELINK_BASE_API : constants_1.DEFAULT_BASE_API}/assets`;\n        }\n        this.endpoint = endpoint;\n    }\n    /**\n     * Get a single asset.\n     *\n     * @param request - {@link GetAssetRequest} - includes either the name or the\n     * id of the requested asset.\n     *\n     * @throws {@link OctoAIValidationError} - if no token was found when creating\n     * the {@link Client} class, if neither an `id` nor `name` is provided, if both\n     * are provided, or if the name or id provided is invalid.\n     */\n    async get(request) {\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        if (request.name === undefined && request.id === undefined) {\n            throw new error_1.OctoAIValidationError(\"Either name or id must be provided.\");\n        }\n        if (request.name !== undefined && request.id !== undefined) {\n            throw new error_1.OctoAIValidationError(\"Only one of name or id may be provided.\");\n        }\n        let nameOrId = \"\";\n        if (request.name !== undefined) {\n            nameOrId = request.name;\n        }\n        if (request.id !== undefined) {\n            // To handle lint type checking, must be explicit\n            nameOrId = request.id;\n        }\n        this.validateNameOrId(nameOrId);\n        const response = await fetch(this.endpoint + `/${nameOrId}`, {\n            method: \"get\",\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        const jsonAsset = await response.json();\n        return jsonAsset.asset;\n    }\n    /**\n     * List assets based on the search parameters provided.  Array of assets can be\n     * accessed in response's `data` field.\n     *\n     * @remarks\n     * This method is used with the {@link ListAssetsRequest} class to query\n     * the assets and return.  If there are more assets, the {@link ListAssetsResponse}\n     * will return `true` for has_more as well as the `total` number of assets.\n     *\n     * You can search by `name`, `data_type` such as \"fp16\", set a `limit`, or\n     * start the next request at a certain `offset` for larger requests.\n     *\n     * An example of how to request octoai public assets is below:\n     * ```\n     *   const client = new Client(process.env.OCTOAI_TOKEN);\n     *   const octoAssets = await client.asset.list({\n     *     is_public: true,\n     *     owner: \"octoai\",\n     *     engine: \"image/stable-diffusion-v1-5\",\n     *     asset_type: \"lora\",\n     *   });\n     * ```\n     *\n     * @param request - {@link ListAssetsRequest} - parameters to use to filter\n     * assets in response.\n     *\n     * @throws {@link OctoAIValidationError} if there isn't a token set in the client.\n     */\n    async list(request) {\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        const processedRequest = new ListAssetsRequest(request);\n        const reqURL = this.endpoint +\n            \"?\" +\n            new URLSearchParams(processedRequest);\n        const response = await fetch(reqURL, {\n            method: \"GET\",\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        const responseJSON = await response.json();\n        return responseJSON;\n    }\n    /**\n     * Delete an asset.\n     *\n     * @param id - ID of asset to be deleted.  Should start with `asset`.\n     *\n     * @throws {@link OctoAIValidationError} if no token was found when creating\n     * the {@link Client} class or if id is invalid.\n     */\n    async delete(id) {\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        this.validateNameOrId(id);\n        const response = await fetch(this.endpoint + `/${id}`, {\n            method: \"DELETE\",\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        return (await response.json());\n    }\n    /**\n     * Creates and uploads asset, then returns the {@link Asset}.\n     *\n     * Will select the most efficient transfer_api_type if left undefined.\n     *\n     * @param request - {@link CreateAssetRequest}\n     *\n     * @throws {@link OctoAIValidationError} if no token was found when creating\n     * the {@link Client} class.\n     *\n     * @remarks\n     * This is used with {@link CreateAssetRequest}.  The `data` field requires\n     * data from the matching asset_type.  This includes {@link FileData},\n     * {@link CheckpointData}, {@link LoraData}, {@link VAEData},\n     * and {@link TextualInversionData}.\n     *\n     * @example\n     * Creating an asset from a local file:\n     * ```ts\n     * import { Client, LoraData } from \"@octoai/client\";\n     *\n     * const client = new Client(process.env.OCTOAI_TOKEN);\n     *\n     * const loraData = {\n     *   asset_type: \"lora\",\n     *   data_type: \"fp16\",\n     *   engine: \"image/stable-diffusion-v1-5\",\n     *   file_format: \"safetensors\",\n     *   trigger_words: [\"origami paper\"],\n     * } as LoraData;\n     *\n     * const createdAsset = await client.asset.create({\n     *   file: \"./test_assets/origami-paper.safetensors\",\n     *   asset_type: \"lora\",\n     *   description: \"origami paper lora\",\n     *   data: loraData,\n     *   name: \"origami-paper\",\n     *   is_public: false,\n     * });\n     * ```\n     *\n     * @example\n     * Creating an asset via URL upload:\n     * ```ts\n     * import { Client, LoraData } from \"@octoai/client\";\n     *\n     * const client = new Client(process.env.OCTOAI_TOKEN);\n     *\n     * const loraData = {\n     *   asset_type: \"lora\",\n     *   data_type: \"fp16\",\n     *   engine: \"image/stable-diffusion-xl-v1-0\",\n     *   file_format: \"safetensors\",\n     *   trigger_words: [\"my trigger word\"],\n     * } as LoraData;\n     *\n     * const createdAsset = await client.asset.create({\n     *   url: \"<ASSET_DOWNLOAD_URL>\",\n     *   asset_type: \"lora\",\n     *   description: \"My SDXL LoRA\",\n     *   data: loraData,\n     *   name: \"my-sdxl-lora\",\n     *   is_public: false,\n     * });\n     * ```\n     */\n    async create(request) {\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        if (!request.file && !request.url) {\n            throw new error_1.OctoAIValidationError(\"Either 'file' or 'url' must be provided.\");\n        }\n        if (request.file && request.url) {\n            throw new error_1.OctoAIValidationError(\"Only one of 'file' or 'url' may be provided.\");\n        }\n        if (request.file) {\n            const blob = await this.getBuffer(request.file);\n            // Pick most efficient option based on file size if not self-selected\n            if (!request.transfer_api_type) {\n                if (blob.byteLength >= 52428800) {\n                    request.transfer_api_type = \"sts\";\n                }\n                else {\n                    request.transfer_api_type = \"presigned-url\";\n                }\n            }\n            // Drop all undefined fields.\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars -- I wanna omit via spread\n            const { file, ...processedRequest } = new CreateAssetRequest(request);\n            const { asset, transfer_api } = await this.createAsset(processedRequest);\n            if (request.transfer_api_type === \"sts\") {\n                await this.uploadSts(transfer_api, blob);\n            }\n            if (request.transfer_api_type === \"presigned-url\") {\n                await this.uploadPresigned(transfer_api, blob);\n            }\n            await this.completeUpload(asset.id);\n            return this.get({ id: asset.id });\n        }\n        else {\n            if (!request.url || !URL.canParse(request.url)) {\n                throw new error_1.OctoAIValidationError(\"A valid URL must be provided.\");\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars -- I wanna omit via spread again\n            const { file, ...processedRequest } = new CreateAssetRequest(request);\n            const { asset } = await this.createAsset(processedRequest);\n            return this.get({ id: asset.id });\n        }\n    }\n    /**\n     * Waits for an {@link Asset} to be ready to use. Useful when uploading assets via URL.\n     *\n     * @param asset - The {@link Asset} to poll.\n     * @param options - Additional options for changing the poll interval and timeout durations.\n     * @returns A ready {@link Asset}.\n     *\n     * @throws {@link OctoAIValidationError}\n     * Thrown if the asset has an upload error or if the asset is rejected for safety.\n     *\n     * @throws {@link OctoAITimeoutError}\n     * Thrown if the asset isn't ready by the specified timeout. Doesn't\n     * necessarily indicate a failure.\n     */\n    async waitForReady(asset, options) {\n        const { pollIntervalMs = 10000, timeoutMs = 900000 } = options ?? {};\n        let assetCopy = { ...asset };\n        const startMs = new Date().getTime();\n        do {\n            await new Promise((resolve) => setTimeout(resolve, pollIntervalMs));\n            assetCopy = await this.get({ id: asset.id });\n            if (assetCopy.status === \"ready\") {\n                return assetCopy;\n            }\n            if (assetCopy.status === \"error\" || assetCopy.status === \"rejected\") {\n                throw new error_1.OctoAIValidationError(`Error validating asset ${assetCopy.id}: ${assetCopy.status} ${assetCopy.status_details}`);\n            }\n        } while (new Date().getTime() < startMs + timeoutMs);\n        throw new error_1.OctoAITimeoutError(`Asset '${assetCopy.id}' was not ready after ${timeoutMs} milliseconds`);\n    }\n    // Returns buffer from provided valid files, else throws a validation error.\n    /** @private */\n    async getBuffer(file) {\n        try {\n            if (file instanceof ArrayBuffer) {\n                return Buffer.from(file);\n            }\n            if (file instanceof Buffer) {\n                return file;\n            }\n            // Try running as a file path instead\n            return (0, fs_1.readFileSync)(file);\n        }\n        catch (e) {\n            throw new error_1.OctoAIValidationError(`File ${file} was unable to be processed as an ArrayBuffer, Buffer, or a valid filepath.  Please verify the validity of your file and try again.`);\n        }\n    }\n    async createAsset(request) {\n        const response = await fetch(this.endpoint, {\n            method: \"POST\",\n            body: JSON.stringify(request),\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        return response.json();\n    }\n    // Posts the upload is done back to the API after file upload.\n    // Used by create method.\n    /** @private */\n    async completeUpload(id) {\n        const completionURL = this.endpoint + `/${id}/complete-upload`;\n        const completeResponse = await fetch(completionURL, {\n            method: \"POST\",\n            body: JSON.stringify({}),\n            headers: this.client.headers,\n        });\n        if (!completeResponse.ok) {\n            await (0, error_1.throwOctoAIError)(completeResponse);\n        }\n    }\n    // Uses the presigned API to upload a file.\n    /** @private */\n    async uploadPresigned(transferApi, blob) {\n        const presignedResp = await fetch(transferApi.put_url, {\n            method: \"PUT\",\n            body: blob,\n        });\n        if (!presignedResp.ok) {\n            throw new error_1.OctoAIServerError(`Error uploading file to server: ${presignedResp.statusText}`);\n        }\n    }\n    // Uses the sts API to upload a file.\n    /** @private */\n    async uploadSts(transferApi, blob) {\n        const s3 = new client_s3_1.S3({\n            region: \"us-east-1\",\n            credentials: {\n                accessKeyId: transferApi.aws_access_key_id,\n                secretAccessKey: transferApi.aws_secret_access_key,\n                sessionToken: transferApi.aws_session_token,\n            },\n        });\n        try {\n            await s3.putObject({\n                Bucket: transferApi.s3_bucket,\n                Key: transferApi.s3_key,\n                Body: blob,\n            });\n        }\n        catch (e) {\n            throw new error_1.OctoAIServerError(`Error uploading file to server: ${e}`);\n        }\n    }\n    /** @private */\n    validateNameOrId(nameOrId) {\n        const regex = new RegExp(\"^[a-zA-Z0-9_-]*$\");\n        if (!regex.test(nameOrId)) {\n            const msg = `name or id(${nameOrId}) is invalid.  Valid names or ids may only contain alphanumeric, '-', or '_' characters.`;\n            throw new error_1.OctoAIValidationError(msg);\n        }\n    }\n}\nexports.AssetLibrary = AssetLibrary;\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/lib/asset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/lib/chat.js":
/*!**************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/lib/chat.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Completions = exports.ChatCompletionCreateRequest = exports.Chat = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/error.js\");\nconst stream_1 = __webpack_require__(/*! ./stream */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/stream.js\");\n/**\n * Chat completion API.  Expected to be used through `client.chat.completions`.\n */\nclass Chat {\n    constructor(client) {\n        this.completions = new Completions(client);\n    }\n    /**\n     * Returns a list of models available to be used in the API.\n     * {@link TEXT_MODELS}\n     */\n    listAllModels() {\n        return constants_1.TEXT_MODELS;\n    }\n}\nexports.Chat = Chat;\n// The codegen class is dependent on an enum, which we can't easily convert to\n// a string, so instead we've recreated this class to do basic type checking\n// of requests, validation, param requirements, though this is dependent on some\n// codegen classes as well.  CreateChatCompletionRequestMessage and TextModel\n// are not codegen.\n/**\n * ChatCompletionCreateRequest class.  Can be used as an interface, but also\n * instantiates the class handling stream default behavior with stream default\n * being disabled if not explicitly set to on.\n *\n * @property messages - messages - An array of {@link ChatCompletionRequestMessage}\n * comprising the conversation so far.\n * @property  model - ID of the model to use.\n * @property  frequency_penalty - Number between -2.0 and 2.0. Positive values\n * penalize new tokens based on their existing frequency in the text so far,\n * decreasing the model's likelihood to repeat the same line verbatim.\n * @property  max_tokens - The maximum number of tokens to generate in the chat\n * completion. The total length of input tokens and generated tokens is limited\n * by the model's context length.\n * @property  presence_penalty - Number between -2.0 and 2.0. Positive values\n * penalize new tokens based on whether they appear in the text so far,\n * increasing the model's likelihood to talk about new topics.\n * @property  stop - up to 4 sequences where\n * the API will stop generating further tokens.\n * @property  stream - If set, partial message deltas will be sent. Tokens will be\n * sent as data-only.  Defaults to false.\n * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n * as they become available, with the stream terminated by a `data: [DONE]`\n * message.  This output is processed through {@link Stream} and returns\n * {@link CreateChatCompletionStreamResponse} if set to `true`.  If set to\n * `false` or not specified, returns {@link CreateChatCompletionResponse}\n * @property  temperature - What sampling temperature to use, between 0 and 2.\n * Higher values like 0.8 will make the output more random, while lower values\n * like 0.2 will make it more focused and deterministic.\n * We generally recommend altering this or `top_p` but not both.\n * @property  top_p - An alternative to sampling with temperature, called nucleus\n * sampling, where the model considers the results of the tokens with top_p\n * probability mass. So 0.1 means only the tokens comprising the top 10%\n * probability mass are considered.\n * We generally recommend altering this or `temperature` but not both.\n */\nclass ChatCompletionCreateRequest {\n    /**\n     * Constructor for the ChatCompletionCreateRequest.\n     *\n     * @param request - can contain the following fields, but must contain messages\n     * and model.\n     */\n    constructor(request) {\n        this.messages = request.messages;\n        this.model = request.model;\n        for (const key in request) {\n            const value = request[key];\n            if (value === undefined || value === null) {\n                delete request[key];\n            }\n        }\n        Object.assign(this, request);\n        if (this.stream === undefined) {\n            this.stream = false;\n        }\n    }\n}\nexports.ChatCompletionCreateRequest = ChatCompletionCreateRequest;\n/**\n * Chat completions API.\n *\n * @param client - Uses the {@link Client} class to manage requests.\n */\nclass Completions {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Create a chat completion, either streaming or non-streaming.\n     *\n     * @param request - {@link ChatCompletionCreateRequest} including the\n     * required fields of messages and model.  Defaults to non-streaming.\n     * @param endpoint - used to direct request to a different endpoint.  Defaults\n     * to `https://text.octoai.run/v1/chat/completions` if no endpoint is provided\n     * or uses the SecureLink API if set on client instantiation.\n     */\n    async create(request, endpoint) {\n        // Stalls throwing an error until API used due to importing it in client.\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        if (!endpoint) {\n            endpoint = `${this.client.secureLink ? constants_1.SECURELINK_TEXT_GEN_API : constants_1.DEFAULT_TEXT_GEN_API}/chat/completions`;\n        }\n        const processedRequest = new ChatCompletionCreateRequest(request);\n        if (request.stream) {\n            const response = await this.client.inferStream(endpoint, processedRequest);\n            return stream_1.Stream.fromSSEResponse(response, new AbortController());\n        }\n        return this.client.infer(endpoint, processedRequest);\n    }\n}\nexports.Completions = Completions;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY2hhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSwyQ0FJcUI7QUFDckIsbUNBQXdEO0FBQ3hELHFDQUFrQztBQUVsQzs7R0FFRztBQUNILE1BQWEsSUFBSTtJQUdmLFlBQVksTUFBYztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxhQUFhO1FBQ2xCLE9BQU8sdUJBQVcsQ0FBQztJQUNyQixDQUFDO0NBQ0Y7QUFkRCxvQkFjQztBQTBCRCw4RUFBOEU7QUFDOUUsNEVBQTRFO0FBQzVFLGdGQUFnRjtBQUNoRiw2RUFBNkU7QUFDN0UsbUJBQW1CO0FBQ25COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1DRztBQUNILE1BQWEsMkJBQTJCO0lBV3RDOzs7OztPQUtHO0lBQ0gsWUFBWSxPQUE0QjtRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzNCLEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7WUFDMUIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQTJCLENBQUMsQ0FBQztZQUNuRCxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksRUFBRSxDQUFDO2dCQUMxQyxPQUFPLE9BQU8sQ0FBQyxHQUEyQixDQUFDLENBQUM7WUFDOUMsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3QixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQS9CRCxrRUErQkM7QUFrQkQ7Ozs7R0FJRztBQUNILE1BQWEsV0FBVztJQUd0QixZQUFZLE1BQWM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQWlCRDs7Ozs7Ozs7T0FRRztJQUNJLEtBQUssQ0FBQyxNQUFNLENBQ2pCLE9BQW9DLEVBQ3BDLFFBQWlCO1FBSWpCLHlFQUF5RTtRQUN6RSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUM3QyxJQUFBLHFDQUE2QixHQUFFLENBQUM7UUFDbEMsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNkLFFBQVEsR0FBRyxHQUNULElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxtQ0FBdUIsQ0FBQyxDQUFDLENBQUMsZ0NBQ3JELG1CQUFtQixDQUFDO1FBQ3RCLENBQUM7UUFDRCxNQUFNLGdCQUFnQixHQUFHLElBQUksMkJBQTJCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEUsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDbkIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDNUMsUUFBUSxFQUNSLGdCQUFnQixDQUNqQixDQUFDO1lBQ0YsT0FBTyxlQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxJQUFJLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDakUsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNGO0FBeERELGtDQXdEQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/lib/chat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/lib/client.js":
/*!****************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/lib/client.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Client = void 0;\nconst version_1 = __webpack_require__(/*! ../version */ \"(rsc)/./node_modules/@octoai/client/build/module/version.js\");\nconst asset_1 = __webpack_require__(/*! ./asset */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/asset.js\");\nconst chat_1 = __webpack_require__(/*! ./chat */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/chat.js\");\nconst completions_1 = __webpack_require__(/*! ./completions */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/completions.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/error.js\");\nconst tune_1 = __webpack_require__(/*! ./tune */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/tune.js\");\n/**\n * A client that allows inferences from existing OctoAI endpoints.  Sets\n * various headers, establishes clients for {@link Chat} under `Client.chat`,\n * {@link AssetLibrary} under `Client.asset`, {@link FineTuningClient} under\n * `Client.tune`, and will check for `OCTOAI_TOKEN`\n * from environment variable if no token is provided.\n *\n * @throws {@link OctoAIClientError} - For client-side failures (throttled, no token)\n * @throws {@link OctoAIServerError} - For server-side failures (unreachable, etc)\n *\n * @remarks\n * You can create an OctoAI API token by following the guide at\n * {@link https://docs.octoai.cloud/docs/how-to-create-an-octoai-access-token |\n * How to Create an OctoAI Access Token}\n */\nclass Client {\n    /**\n     * Constructor for the Client class.\n     *\n     * @param token - OctoAI token.  If none is set, checks for an `OCTOAI_TOKEN`\n     * envvar, or will default to null.\n     * @param secureLink - Set to true to use SecureLink API instead of public API\n     */\n    constructor(token, secureLink = false) {\n        token = token || process.env.OCTOAI_TOKEN || null;\n        if (!token) {\n            console.warn(\"OCTOAI_TOKEN is not set as an environment variable and \" +\n                \"wasn't passed to the Client constructor as a token.\" +\n                \" You will only be able to use QuickStart OctoAI endpoints.  \" +\n                \"client.asset, client.chat, and client.tune will throw errors if \" +\n                \"accessed.\");\n        }\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": `octoai-ts-${version_1.LIB_VERSION}`,\n            Authorization: \"\",\n            \"X-OctoAI-Async\": \"\", // 0 disabled, 1 enabled\n            Accept: \"\",\n        };\n        if (token) {\n            headers.Authorization = `Bearer ${token}`;\n        }\n        this.secureLink = secureLink;\n        this.headers = headers;\n        this.chat = new chat_1.Chat(this);\n        this.asset = new asset_1.AssetLibrary(this);\n        this.tune = new tune_1.FineTuningClient(this);\n        this.completions = new completions_1.CompletionsAPI(this);\n    }\n    /**\n     * Send a request to the given endpoint with inputs as request body.\n     * For LLaMA2 LLMs, this requires `\"stream\": false` in the inputs.  To stream\n     * for LLMs, please see the {@link inferStream} method.\n     *\n     * @param endpointUrl - Target URL to run inference\n     * @param inputs - Necessary inputs for the endpointURL to run inference\n     *\n     * @returns JSON outputs from the endpoint\n     */\n    async infer(endpointUrl, inputs) {\n        const response = await fetch(endpointUrl, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(inputs),\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        return response.json();\n    }\n    /**\n     * Stream text event response body for supporting endpoints.  This is an\n     * alternative to loading all response body into memory at once.  Recommended\n     * for use with LLM models.  Requires `\"stream\": true` in the inputs for\n     * LLaMA2 LLMs.\n     *\n     * @param endpointUrl - Target URL to run inference\n     * @param inputs - Necessary inputs for the endpointURL to run inference\n     * @returns Compatible with getReader method.\n     *\n     * @remarks\n     * This allows you to stream back tokens from the LLMs.  Below is an example\n     * on how to do this with a LLaMA2 LLM using a completions style API.\n     *\n     * HuggingFace style APIs will usually use the variable `done` below to\n     * indicate the end of the stream.  OpenAI style APIs will often send a\n     * string in the stream `\"data: [DONE]\\n\"` to indicate the stream is complete.\n     *\n     * This example concatenates all values from the tokens into a single text\n     * variable.  How you choose to use the tokens will likely be different, so\n     * please modify the code.\n     *\n     * This examples assumes:\n     * 1) You've followed the guide at\n     * {@link https://docs.octoai.cloud/docs/how-to-create-an-octoai-access-token |\n     * How to Create an OctoAI Access Token} to create and set your OctoAI access\n     * token\n     * 2) Either that you will set this token as an OCTOAI_TOKEN envvar\n     * or edit the snippet to pass it as a value in the `{@link Client.constructor}`.\n     * 3) You have assigned your endpoint URL and inputs into variables named\n     * llamaEndpoint and streamInputs.\n     *\n     *```ts\n     * const client = new Client();\n     *     const readableStream = await client.inferStream(\n     *       llamaEndpoint,\n     *       streamInputs\n     *     );\n     * let text = ``;\n     * const streamReader = readableStream.getReader();\n     * for (\n     *   let { value, done } = await streamReader.read();\n     *   !done;\n     *   { value, done } = await streamReader.read()\n     * ) {\n     *   if (done) break;\n     *   const decoded = new TextDecoder().decode(value);\n     *   if (\n     *     decoded === \"data: [DONE]\\n\" ||\n     *     decoded.includes('\"finish_reason\": \"')\n     *   ) {\n     *     break;\n     *   }\n     *   const token = JSON.parse(decoded.substring(5));\n     *   if (token.object === \"chat.completion.chunk\") {\n     *     text += token.choices[0].delta.content;\n     *   }\n     * console.log(text);\n     *```\n     * The `const token = JSON.parse(decoded.substring(5))` line strips `\"data\"`\n     * from the returned text/event-stream then parses the token as an object.\n     */\n    async inferStream(endpointUrl, inputs) {\n        const headers = { ...this.headers, Accept: \"text/event-stream\" };\n        const response = await fetch(endpointUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(inputs),\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        return response;\n    }\n    coldStartWarning() {\n        console.warn(\"Your endpoint may take several minutes to start \" +\n            \"and be ready to serve inferences. You can increase your endpoint's \" +\n            \"min replicas to mitigate cold starts.\");\n    }\n    /**\n     * Check health of an endpoint using a get request.  Try until timeout.\n     *\n     * @param endpointUrl - Target URL to run the health check.\n     * @param timeoutMS - Milliseconds before request times out.  Default is 15\n     * minutes.\n     * @param intervalMS - Interval in milliseconds before the healthCheck method\n     * queries\n     * @returns HTTP status code.\n     *\n     * @remarks\n     * The default timeout is set to 15 minutes to allow for potential cold start.\n     *\n     * For custom containers, please follow\n     * {@link https://docs.octoai.cloud/docs/health-check-paths-in-custom-containers\n     * | Health Check Paths in Custom Containers} to set a health check endpoint.\n     *\n     * Information about health check endpoint URLs are available on relevant\n     * QuickStart Templates.\n     */\n    async healthCheck(endpointUrl, timeoutMS = 900000, // 15 minutes for cold start\n    intervalMS = 1000) {\n        const start = new Date().getTime();\n        // Fence post\n        let response = await fetch(endpointUrl, {\n            method: \"GET\",\n            headers: this.headers,\n        });\n        if (!response.ok) {\n            this.coldStartWarning();\n        }\n        while (new Date().getTime() - start < timeoutMS && !response.ok) {\n            if (400 <= response.status && response.status < 500) {\n                await (0, error_1.throwOctoAIError)(response);\n            }\n            response = await fetch(endpointUrl, {\n                method: \"GET\",\n                headers: this.headers,\n            });\n            await new Promise((resolve) => setTimeout(resolve, intervalMS));\n        }\n        if (response.status >= 400) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        return response.status;\n    }\n    /**\n     * Execute an inference in the background on the server.\n     *\n     * @param endpointUrl - Target URL to send inference request.\n     * @param inputs - Contains necessary inputs for endpoint to run inference.\n     * @returns Future allows checking if results are ready then accessing them.\n     *\n     * @remarks\n     * Please read the {@link https://docs.octoai.cloud/reference/inference |\n     * Async Inference Reference} for more information.\n     * {@link Client.inferAsync} returns an {@link InferenceFuture},\n     * which can then be used with {@link Client.isFutureReady} to see the\n     * status.  Once it returns `true`, you can use the\n     * {@link Client.getFutureResult} to get the response for your\n     * InferenceFuture.\n     *\n     * Assuming you have a variable with your target endpoint URL and the inputs\n     * the model needs, and an `OCTOAI_TOKEN` set as an environment variable, you\n     * can run a server-side asynchronous inference from\n     * {@link https://docs.octoai.cloud/docs/welcome-to-the-octoai-compute-service-copy | QuickStart Template}\n     * endpoints with something like the below.\n     *\n     * ```ts\n     *  const client = new Client();\n     *  const future = await client.inferAsync(url, inputs);\n     *  if (await client.isFutureReady(future) === true) {\n     *    return await client.getFutureResult(future);\n     *  }\n     * ```\n     */\n    async inferAsync(endpointUrl, inputs) {\n        const headers = { ...this.headers };\n        headers[\"X-OctoAI-Async\"] = \"1\"; // Enables server-side async\n        const response = await fetch(endpointUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(inputs),\n        });\n        if (response.status >= 400) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        const future = (await response.json());\n        return future;\n    }\n    async pollFuture(future) {\n        const response = await fetch(future.poll_url, {\n            method: \"GET\",\n            headers: this.headers,\n        });\n        if (response.status >= 400) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        return (await response.json());\n    }\n    /**\n     * Return whether the {@link InferenceFuture} generated from\n     * {@link Client.inferAsync} has been computed and can return results.\n     *\n     * @param future - Created from {@link Client.inferAsync}.\n     * @returns True if the {@link InferenceFuture}\n     * inference is completed and are able to use {@link Client.getFutureResult}.\n     * Else returns false.\n     */\n    async isFutureReady(future) {\n        const respObject = await this.pollFuture(future);\n        return \"completed\" === respObject.status;\n    }\n    /**\n     * Return the result of a {@link InferenceFuture} generated from\n     * {@link Client.inferAsync} as long as {@link Client.isFutureReady} returned\n     * `true`.\n     *\n     * @param future - An {@link InferenceFuture} generated from\n     * {@link Client.inferAsync}\n     * @returns JSON outputs from the endpoint.\n     */\n    async getFutureResult(future) {\n        const respObject = await this.pollFuture(future);\n        if (respObject.status !== \"completed\") {\n            await (0, error_1.throwOctoAIError)(new Response(null, {\n                status: 425,\n                statusText: \"Wait until isFutureReady returns true before running getFutureResult.\",\n            }));\n        }\n        const responseUrl = respObject.response_url;\n        const response = await fetch(responseUrl, {\n            method: \"GET\",\n            headers: this.headers,\n        });\n        if (response.status >= 400) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        return response.json();\n    }\n}\nexports.Client = Client;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQXlDO0FBRXpDLG1DQUF1QztBQUN2QyxpQ0FBOEI7QUFDOUIsK0NBQStDO0FBQy9DLG1DQUEyQztBQUMzQyxpQ0FBMEM7QUFxQzFDOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsTUFBYSxNQUFNO0lBbUNqQjs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQXFCLEVBQUUsYUFBc0IsS0FBSztRQUM1RCxLQUFLLEdBQUcsS0FBSyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQztRQUVsRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDWCxPQUFPLENBQUMsSUFBSSxDQUNWLHlEQUF5RDtnQkFDdkQscURBQXFEO2dCQUNyRCw4REFBOEQ7Z0JBQzlELGtFQUFrRTtnQkFDbEUsV0FBVyxDQUNkLENBQUM7UUFDSixDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUc7WUFDZCxjQUFjLEVBQUUsa0JBQWtCO1lBQ2xDLFlBQVksRUFBRSxhQUFhLHFCQUFXLEVBQUU7WUFDeEMsYUFBYSxFQUFFLEVBQUU7WUFDakIsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLHdCQUF3QjtZQUM5QyxNQUFNLEVBQUUsRUFBRTtTQUNYLENBQUM7UUFFRixJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ1YsT0FBTyxDQUFDLGFBQWEsR0FBRyxVQUFVLEtBQUssRUFBRSxDQUFDO1FBQzVDLENBQUM7UUFDRCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxvQkFBWSxDQUFDLElBQUks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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/lib/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/lib/completions.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/lib/completions.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompletionsAPI = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/error.js\");\nconst stream_1 = __webpack_require__(/*! ./stream */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/stream.js\");\nclass CompletionsAPI {\n    constructor(client) {\n        this.client = client;\n    }\n    async create(request, endpoint) {\n        if (!this.client.headers.Authorization) {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        if (!endpoint) {\n            endpoint = `${this.client.secureLink ? constants_1.SECURELINK_TEXT_GEN_API : constants_1.DEFAULT_TEXT_GEN_API}/completions`;\n        }\n        if (request.stream) {\n            const response = await this.client.inferStream(endpoint, request);\n            return stream_1.Stream.fromSSEResponse(response, new AbortController());\n        }\n        return this.client.infer(endpoint, request);\n    }\n}\nexports.CompletionsAPI = CompletionsAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2NvbXBsZXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU1BLDJDQUE0RTtBQUM1RSxtQ0FBd0Q7QUFDeEQscUNBQWtDO0FBZ0JsQyxNQUFhLGNBQWM7SUFHekIsWUFBWSxNQUFjO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFrRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFnQyxFQUFFLFFBQWlCO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QyxJQUFBLHFDQUE2QixHQUFFLENBQUM7UUFDbEMsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNkLFFBQVEsR0FBRyxHQUNULElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxtQ0FBdUIsQ0FBQyxDQUFDLENBQUMsZ0NBQ3JELGNBQWMsQ0FBQztRQUNqQixDQUFDO1FBRUQsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDbkIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFbEUsT0FBTyxlQUFNLENBQUMsZUFBZSxDQUMzQixRQUFRLEVBQ1IsSUFBSSxlQUFlLEVBQUUsQ0FDdEIsQ0FBQztRQUNKLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUEyQixRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEUsQ0FBQztDQUNGO0FBNUZELHdDQTRGQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9jdG9haS9jbGllbnQvYnVpbGQvbW9kdWxlL2xpYi9jb21wbGV0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsb0JBQW9CLG1CQUFPLENBQUMsc0ZBQWE7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsOEVBQVM7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMsZ0ZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGdHQUFnRztBQUMxSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9Ab2N0b2FpL2NsaWVudC9idWlsZC9tb2R1bGUvbGliL2NvbXBsZXRpb25zLmpzPzZhYzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBsZXRpb25zQVBJID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCIuL3N0cmVhbVwiKTtcbmNsYXNzIENvbXBsZXRpb25zQVBJIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgfVxuICAgIGFzeW5jIGNyZWF0ZShyZXF1ZXN0LCBlbmRwb2ludCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xpZW50LmhlYWRlcnMuQXV0aG9yaXphdGlvbikge1xuICAgICAgICAgICAgKDAsIGVycm9yXzEudGhyb3dPY3RvQUlUb2tlblJlcXVpcmVkRXJyb3IpKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICAgICAgZW5kcG9pbnQgPSBgJHt0aGlzLmNsaWVudC5zZWN1cmVMaW5rID8gY29uc3RhbnRzXzEuU0VDVVJFTElOS19URVhUX0dFTl9BUEkgOiBjb25zdGFudHNfMS5ERUZBVUxUX1RFWFRfR0VOX0FQSX0vY29tcGxldGlvbnNgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0cmVhbSkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNsaWVudC5pbmZlclN0cmVhbShlbmRwb2ludCwgcmVxdWVzdCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyZWFtXzEuU3RyZWFtLmZyb21TU0VSZXNwb25zZShyZXNwb25zZSwgbmV3IEFib3J0Q29udHJvbGxlcigpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuaW5mZXIoZW5kcG9pbnQsIHJlcXVlc3QpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tcGxldGlvbnNBUEkgPSBDb21wbGV0aW9uc0FQSTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyOXRjR3hsZEdsdmJuTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZiR2xpTDJOdmJYQnNaWFJwYjI1ekxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVUxQkxESkRRVUUwUlR0QlFVTTFSU3h0UTBGQmQwUTdRVUZEZUVRc2NVTkJRV3RETzBGQlowSnNReXhOUVVGaExHTkJRV003U1VGSGVrSXNXVUZCV1N4TlFVRmpPMUZCUTNoQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMGxCUTNaQ0xFTkJRVU03U1VGclJVUXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGblF5eEZRVUZGTEZGQlFXbENPMUZCUXpsRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlF6dFpRVU4yUXl4SlFVRkJMSEZEUVVFMlFpeEhRVUZGTEVOQlFVTTdVVUZEYkVNc1EwRkJRenRSUVVORUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0WlFVTmtMRkZCUVZFc1IwRkJSeXhIUVVOVUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXh0UTBGQmRVSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1owTkJRM0pFTEdOQlFXTXNRMEZCUXp0UlFVTnFRaXhEUVVGRE8xRkJSVVFzU1VGQlNTeFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1dVRkRia0lzVFVGQlRTeFJRVUZSTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkZiRVVzVDBGQlR5eGxRVUZOTEVOQlFVTXNaVUZCWlN4RFFVTXpRaXhSUVVGUkxFVkJRMUlzU1VGQlNTeGxRVUZsTEVWQlFVVXNRMEZEZEVJc1EwRkJRenRSUVVOS0xFTkJRVU03VVVGRlJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVFeVFpeFJRVUZSTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1NVRkRlRVVzUTBGQlF6dERRVU5HTzBGQk5VWkVMSGREUVRSR1F5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/lib/completions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/lib/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/lib/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SECURELINK_BASE_API = exports.SECURELINK_TEXT_GEN_API = exports.DEFAULT_BASE_API = exports.DEFAULT_TEXT_GEN_API = exports.TEXT_MODELS = void 0;\n// enum-like without the TypeScript enum struggles with dict conversion.\n// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions\nexports.TEXT_MODELS = [\n    \"llama-2-13b-chat\",\n    \"llama-2-70b-chat\",\n    \"codellama-7b-instruct\",\n    \"codellama-13b-instruct\",\n    \"codellama-34b-instruct\",\n    \"codellama-70b-instruct\",\n    \"mistral-7b-instruct\",\n    \"mixtral-8x7b-instruct\",\n    \"nous-hermes-2-mixtral-8x7b-dpo\",\n    \"nous-hermes-2-mistral-7b-dpo\",\n];\nexports.DEFAULT_TEXT_GEN_API = \"https://text.octoai.run/v1\";\nexports.DEFAULT_BASE_API = \"https://api.octoai.cloud/v1\";\nexports.SECURELINK_TEXT_GEN_API = \"https://text.securelink.octo.ai/v1\";\nexports.SECURELINK_BASE_API = \"https://api.securelink.octo.ai/v1\";\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0VBQXdFO0FBQ3hFLGtHQUFrRztBQUNyRixRQUFBLFdBQVcsR0FBRztJQUN6QixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsd0JBQXdCO0lBQ3hCLHdCQUF3QjtJQUN4QixxQkFBcUI7SUFDckIsdUJBQXVCO0lBQ3ZCLGdDQUFnQztJQUNoQyw4QkFBOEI7Q0FDdEIsQ0FBQztBQUVFLFFBQUEsb0JBQW9CLEdBQUcsNEJBQTRCLENBQUM7QUFDcEQsUUFBQSxnQkFBZ0IsR0FBRyw2QkFBNkIsQ0FBQztBQUNqRCxRQUFBLHVCQUF1QixHQUFHLG9DQUFvQyxDQUFDO0FBQy9ELFFBQUEsbUJBQW1CLEdBQUcsbUNBQW1DLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9jdG9haS9jbGllbnQvYnVpbGQvbW9kdWxlL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsK0JBQStCLEdBQUcsd0JBQXdCLEdBQUcsNEJBQTRCLEdBQUcsbUJBQW1CO0FBQzdJO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsK0JBQStCO0FBQy9CLDJCQUEyQjtBQUMzQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvQG9jdG9haS9jbGllbnQvYnVpbGQvbW9kdWxlL2xpYi9jb25zdGFudHMuanM/OGNmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU0VDVVJFTElOS19CQVNFX0FQSSA9IGV4cG9ydHMuU0VDVVJFTElOS19URVhUX0dFTl9BUEkgPSBleHBvcnRzLkRFRkFVTFRfQkFTRV9BUEkgPSBleHBvcnRzLkRFRkFVTFRfVEVYVF9HRU5fQVBJID0gZXhwb3J0cy5URVhUX01PREVMUyA9IHZvaWQgMDtcbi8vIGVudW0tbGlrZSB3aXRob3V0IHRoZSBUeXBlU2NyaXB0IGVudW0gc3RydWdnbGVzIHdpdGggZGljdCBjb252ZXJzaW9uLlxuLy8gaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svcmVsZWFzZS1ub3Rlcy90eXBlc2NyaXB0LTMtNC5odG1sI2NvbnN0LWFzc2VydGlvbnNcbmV4cG9ydHMuVEVYVF9NT0RFTFMgPSBbXG4gICAgXCJsbGFtYS0yLTEzYi1jaGF0XCIsXG4gICAgXCJsbGFtYS0yLTcwYi1jaGF0XCIsXG4gICAgXCJjb2RlbGxhbWEtN2ItaW5zdHJ1Y3RcIixcbiAgICBcImNvZGVsbGFtYS0xM2ItaW5zdHJ1Y3RcIixcbiAgICBcImNvZGVsbGFtYS0zNGItaW5zdHJ1Y3RcIixcbiAgICBcImNvZGVsbGFtYS03MGItaW5zdHJ1Y3RcIixcbiAgICBcIm1pc3RyYWwtN2ItaW5zdHJ1Y3RcIixcbiAgICBcIm1peHRyYWwtOHg3Yi1pbnN0cnVjdFwiLFxuICAgIFwibm91cy1oZXJtZXMtMi1taXh0cmFsLTh4N2ItZHBvXCIsXG4gICAgXCJub3VzLWhlcm1lcy0yLW1pc3RyYWwtN2ItZHBvXCIsXG5dO1xuZXhwb3J0cy5ERUZBVUxUX1RFWFRfR0VOX0FQSSA9IFwiaHR0cHM6Ly90ZXh0Lm9jdG9haS5ydW4vdjFcIjtcbmV4cG9ydHMuREVGQVVMVF9CQVNFX0FQSSA9IFwiaHR0cHM6Ly9hcGkub2N0b2FpLmNsb3VkL3YxXCI7XG5leHBvcnRzLlNFQ1VSRUxJTktfVEVYVF9HRU5fQVBJID0gXCJodHRwczovL3RleHQuc2VjdXJlbGluay5vY3RvLmFpL3YxXCI7XG5leHBvcnRzLlNFQ1VSRUxJTktfQkFTRV9BUEkgPSBcImh0dHBzOi8vYXBpLnNlY3VyZWxpbmsub2N0by5haS92MVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTI5dWMzUmhiblJ6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDJ4cFlpOWpiMjV6ZEdGdWRITXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNkMFZCUVhkRk8wRkJRM2hGTEd0SFFVRnJSenRCUVVOeVJpeFJRVUZCTEZkQlFWY3NSMEZCUnp0SlFVTjZRaXhyUWtGQmEwSTdTVUZEYkVJc2EwSkJRV3RDTzBsQlEyeENMSFZDUVVGMVFqdEpRVU4yUWl4M1FrRkJkMEk3U1VGRGVFSXNkMEpCUVhkQ08wbEJRM2hDTEhkQ1FVRjNRanRKUVVONFFpeHhRa0ZCY1VJN1NVRkRja0lzZFVKQlFYVkNPMGxCUTNaQ0xHZERRVUZuUXp0SlFVTm9ReXc0UWtGQk9FSTdRMEZEZEVJc1EwRkJRenRCUVVWRkxGRkJRVUVzYjBKQlFXOUNMRWRCUVVjc05FSkJRVFJDTEVOQlFVTTdRVUZEY0VRc1VVRkJRU3huUWtGQlowSXNSMEZCUnl3MlFrRkJOa0lzUTBGQlF6dEJRVU5xUkN4UlFVRkJMSFZDUVVGMVFpeEhRVUZITEc5RFFVRnZReXhEUVVGRE8wRkJReTlFTEZGQlFVRXNiVUpCUVcxQ0xFZEJRVWNzYlVOQlFXMURMRU5CUVVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/lib/error.js":
/*!***************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/lib/error.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.throwOctoAITokenRequiredError = exports.throwOctoAIError = exports.OctoAITimeoutError = exports.OctoAIServerError = exports.OctoAIClientError = exports.OctoAIValidationError = void 0;\n/**\n * A class of errors specific to the OctoAI TS SDK.\n */\nclass OctoAIError extends Error {\n    /**\n     * Parent class for OctoAI Errors used by the TS SDK.\n     *\n     * @param message - Message from server or client about cause of error.\n     * @param causedBy - Error code of course error.  Usually HTTP errors.\n     */\n    constructor(message, causedBy) {\n        super(message);\n        this.name = this.constructor.name;\n        this.causedBy = causedBy;\n    }\n}\n/**\n * Client-side validation errors.  Problems with request caught before sending.\n */\nclass OctoAIValidationError extends OctoAIError {\n}\nexports.OctoAIValidationError = OctoAIValidationError;\n/**\n * Client-side errors.  Indicated by HTTP codes from 400 through 499.\n */\nclass OctoAIClientError extends OctoAIError {\n}\nexports.OctoAIClientError = OctoAIClientError;\n/**\n * Server-side errors.  Indicated by HTTP codes from 500 through 599.\n */\nclass OctoAIServerError extends OctoAIError {\n}\nexports.OctoAIServerError = OctoAIServerError;\n/**\n * Timeout errors that don't necessarily indicate a client or server failure.\n */\nclass OctoAITimeoutError extends OctoAIError {\n}\nexports.OctoAITimeoutError = OctoAITimeoutError;\n/**\n * Support method to create errors to throw on failures.\n *\n * @param response - the server response that isn't ok.\n */\nasync function throwOctoAIError(response) {\n    const statusCode = response.status;\n    let text = response.statusText;\n    try {\n        text += \": \" + JSON.stringify(await response?.json());\n    }\n    catch (e) {\n        // Response doesn't have JSON\n    }\n    let reqIDStr = \"\";\n    const xUserRequestID = response.headers?.get(\"X-User-Request-ID\");\n    if (xUserRequestID !== null && xUserRequestID !== undefined) {\n        reqIDStr = ` (request_id: ${response.headers.get(\"X-User-Request-ID\")})`;\n    }\n    text += reqIDStr;\n    if (statusCode >= 500) {\n        throw new OctoAIServerError(`Server error: ${statusCode} ${text}`);\n    }\n    else if (statusCode === 429) {\n        throw new OctoAIClientError(`Rate limit reached error: ${statusCode} ${text}`);\n    }\n    else {\n        throw new OctoAIClientError(`Error: ${statusCode} ${text}`);\n    }\n}\nexports.throwOctoAIError = throwOctoAIError;\n/**\n * Standardized error message for requiring authorization.\n */\nfunction throwOctoAITokenRequiredError() {\n    const msg = \"An OctoAI token is required to use this API.  Please \" +\n        \"pass your OctoAI token to the client class during instantiation or set it \" +\n        \"as an environment variable named `OCTOAI_TOKEN`.\";\n    throw new OctoAIValidationError(msg);\n}\nexports.throwOctoAITokenRequiredError = throwOctoAITokenRequiredError;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Vycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOztHQUVHO0FBQ0gsTUFBTSxXQUFZLFNBQVEsS0FBSztJQUc3Qjs7Ozs7T0FLRztJQUNILFlBQVksT0FBZSxFQUFFLFFBQWdCO1FBQzNDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztDQUNGO0FBQ0Q7O0dBRUc7QUFDSCxNQUFhLHFCQUFzQixTQUFRLFdBQVc7Q0FBRztBQUF6RCxzREFBeUQ7QUFFekQ7O0dBRUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLFdBQVc7Q0FBRztBQUFyRCw4Q0FBcUQ7QUFFckQ7O0dBRUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLFdBQVc7Q0FBRztBQUFyRCw4Q0FBcUQ7QUFFckQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLFdBQVc7Q0FBRztBQUF0RCxnREFBc0Q7QUFFdEQ7Ozs7R0FJRztBQUNJLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxRQUFrQjtJQUN2RCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ25DLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDL0IsSUFBSSxDQUFDO1FBQ0gsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCw2QkFBNkI7SUFDL0IsQ0FBQztJQUNELElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNsQixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2xFLElBQUksY0FBYyxLQUFLLElBQUksSUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDNUQsUUFBUSxHQUFHLGlCQUFpQixRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUM7SUFDM0UsQ0FBQztJQUNELElBQUksSUFBSSxRQUFRLENBQUM7SUFDakIsSUFBSSxVQUFVLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdEIsTUFBTSxJQUFJLGlCQUFpQixDQUFDLGlCQUFpQixVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO1NBQU0sSUFBSSxVQUFVLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDOUIsTUFBTSxJQUFJLGlCQUFpQixDQUN6Qiw2QkFBNkIsVUFBVSxJQUFJLElBQUksRUFBRSxDQUNsRCxDQUFDO0lBQ0osQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLElBQUksaUJBQWlCLENBQUMsVUFBVSxVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDO0FBQ0gsQ0FBQztBQXZCRCw0Q0F1QkM7QUFFRDs7R0FFRztBQUNILFNBQWdCLDZCQUE2QjtJQUMzQyxNQUFNLEdBQUcsR0FDUCx1REFBdUQ7UUFDdkQsNEVBQTRFO1FBQzVFLGtEQUFrRCxDQUFDO0lBQ3JELE1BQU0sSUFBSSxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBTkQsc0VBTUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/lib/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/lib/stream.js":
/*!****************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/lib/stream.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// FE uses @microsoft/fetch-event-source to deal with streaming,\n// due to being a node-only SDK, coding another solution to return iterable\n// of the specific type for the stream type instead.\n// Adapted from https://github.com/openai/openai-node/blob/master/src/streaming.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Stream = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/error.js\");\nclass Stream {\n    constructor(iterator, controller) {\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    // Expects full fetch response and will process to body / ReadableStream.\n    // Controller can be a new AbortController(), set outside scope to allow user\n    // to abort prematurely if required.\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        const decoder = new SSEDecoder();\n        async function* iterMessages() {\n            if (!response.body) {\n                controller.abort();\n                throw new error_1.OctoAIClientError(\"Attempted to iterate over a response with no body\");\n            }\n            const lineDecoder = new LineDecoder();\n            // Read lines similar to httpx behavior for streams\n            const iterBytes = readableStreamAsyncIterable(response.body);\n            for await (const chunk of iterBytes) {\n                for (const line of lineDecoder.decode(chunk)) {\n                    const sse = decoder.decode(line);\n                    if (sse)\n                        yield sse;\n                }\n            }\n            for (const line of lineDecoder.flush()) {\n                const sse = decoder.decode(line);\n                if (sse)\n                    yield sse;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of iterMessages()) {\n                    if (done)\n                        continue;\n                    // Response sent to break json parsing\n                    if (sse.data.startsWith(\"[DONE]\")) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            // Useful if streaming spontaneously breaks again\n                            throw new error_1.OctoAIClientError(`Failed to parse message into JSON: ${sse.data} from chunk: ${sse.raw}`, e);\n                        }\n                        if (data && data.error) {\n                            throw new error_1.OctoAIClientError(data, data.error);\n                        }\n                        yield data;\n                    }\n                }\n                done = true;\n            }\n            catch (e) {\n                // If `stream.controller.abort()` called, exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\")\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n}\nexports.Stream = Stream;\nclass SSEDecoder {\n    constructor() {\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith(\"\\r\")) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length)\n                return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join(\"\\n\"),\n                raw: this.chunks,\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(\":\")) {\n            return null;\n        }\n        const [fieldName, value] = partition(line, \":\");\n        if (fieldName === \"event\") {\n            this.event = value;\n        }\n        else if (fieldName === \"data\") {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\n/**\n * A re-implementation of httpx `LineDecoder` in Python that handles\n * incrementally reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n    constructor() {\n        this.buffer = [];\n        this.trailingCR = false;\n    }\n    decode(chunk) {\n        let text = this.decodeText(chunk);\n        if (this.trailingCR) {\n            text = \"\\r\" + text;\n            this.trailingCR = false;\n        }\n        if (text.endsWith(\"\\r\")) {\n            this.trailingCR = true;\n            text = text.slice(0, -1);\n        }\n        if (!text) {\n            return [];\n        }\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || \"\");\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n        if (lines.length === 1 && !trailingNewline) {\n            this.buffer.push(lines[0]);\n            return [];\n        }\n        if (this.buffer.length > 0) {\n            lines = [this.buffer.join(\"\") + lines[0], ...lines.slice(1)];\n            this.buffer = [];\n        }\n        if (!trailingNewline) {\n            this.buffer = [lines.pop() || \"\"];\n        }\n        return lines;\n    }\n    decodeText(bytes) {\n        if (bytes == null)\n            return \"\";\n        if (typeof bytes === \"string\")\n            return bytes;\n        // Node:\n        if (typeof Buffer !== \"undefined\") {\n            if (bytes instanceof Buffer) {\n                return bytes.toString();\n            }\n            if (bytes instanceof Uint8Array) {\n                return Buffer.from(bytes).toString();\n            }\n            throw new error_1.OctoAIClientError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node.`);\n        }\n        // Browser TextDecoder issue referred to above\n        if (typeof TextDecoder !== \"undefined\") {\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n                this.textDecoder ?? (this.textDecoder = new TextDecoder(\"utf8\"));\n                return this.textDecoder.decode(bytes);\n            }\n            throw new error_1.OctoAIClientError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n        }\n        throw new error_1.OctoAIClientError(\"Unexpected: Both Buffer and TextDecoder are unavailable as globals.\");\n    }\n    flush() {\n        if (!this.buffer.length && !this.trailingCR) {\n            return [];\n        }\n        const lines = [this.buffer.join(\"\")];\n        this.buffer = [];\n        this.trailingCR = false;\n        return lines;\n    }\n}\nLineDecoder.NEWLINE_CHARS = new Set([\"\\n\", \"\\r\", \"\\x85\", \"\\u2028\", \"\\u2029\"]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x85\\u2028\\u2029]/g;\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        let value = str.substring(index + delimiter.length);\n        if (value.startsWith(\" \")) {\n            value = value.substring(1);\n        }\n        return [str.substring(0, index), value];\n    }\n    return [str, \"\"];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and node reads bytes differently.\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nfunction readableStreamAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator])\n        return stream;\n    const reader = stream.getReader();\n    return {\n        async next() {\n            try {\n                const result = await reader.read();\n                if (result?.done)\n                    reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            }\n            catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return() {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return { done: true, value: undefined };\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/lib/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/lib/tune.js":
/*!**************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/lib/tune.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FineTuningClient = exports.LoraTuneInput = exports.CreateTuneRequest = exports.ListTunesRequest = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@octoai/client/build/module/lib/error.js\");\nclass ListTunesRequest {\n    constructor(request) {\n        const processedRequest = Object.keys(request).reduce((acc, key) => request[key] === undefined || request[key] === null\n            ? { ...acc }\n            : { ...acc, [key]: request[key] }, {});\n        Object.assign(this, processedRequest);\n        if (typeof this.base_checkpoint !== \"string\" &&\n            this.base_checkpoint !== undefined) {\n            this.base_checkpoint = this.base_checkpoint.id;\n        }\n        if (this.trigger_words !== undefined) {\n            validateTriggerWord(this.trigger_words);\n        }\n    }\n}\nexports.ListTunesRequest = ListTunesRequest;\n/**\n * The create tune request.  If assets from the asset library are used to create\n * the files as a list or a string of asset_ids, then the caption will\n * automatically be set to trigger_words[0].\n */\nclass CreateTuneRequest {\n    constructor(request) {\n        const processedRequest = Object.keys(request).reduce((acc, key) => request[key] === undefined\n            ? { ...acc }\n            : { ...acc, [key]: request[key] }, {});\n        Object.assign(this, processedRequest);\n        this.details = new LoraTuneInput(request.details);\n        this.name = request.name;\n    }\n}\nexports.CreateTuneRequest = CreateTuneRequest;\nclass LoraTuneInput {\n    constructor(details) {\n        validateFiles(details.files);\n        validateTriggerWord(details.trigger_words);\n        const processedRequest = Object.keys(details).reduce((acc, key) => details[key] === undefined\n            ? { ...acc }\n            : { ...acc, [key]: details[key] }, {});\n        Object.assign(this, processedRequest);\n        // Is LoraTuneCheckpoint\n        if (Object.prototype.hasOwnProperty.call(details.base_checkpoint, \"checkpoint_id\")) {\n            this.base_checkpoint = details.base_checkpoint;\n        }\n        else {\n            // Is Checkpoint Asset\n            this.base_checkpoint = {\n                checkpoint_id: details.base_checkpoint.id,\n                engine: details.base_checkpoint.engine,\n                name: details.base_checkpoint.name,\n            };\n        }\n        // Convert assets to asset.ids\n        if (Object.prototype.hasOwnProperty.call(details.files[0], \"asset_type\")) {\n            const assets = details.files;\n            const files = assets.map((asset) => ({\n                file_id: asset.id,\n                caption: details.trigger_words[0],\n            }));\n            this.files = files;\n        }\n        else if (typeof details.files[0] === \"string\") {\n            const strings = details.files;\n            const files = strings.map((assetId) => ({\n                file_id: assetId,\n                caption: details.trigger_words[0],\n            }));\n            this.files = files;\n        }\n        else {\n            this.files = details.files;\n        }\n        this.steps = details.steps;\n        this.trigger_words = details.trigger_words;\n    }\n}\nexports.LoraTuneInput = LoraTuneInput;\n/**\n * The FineTuningClient class.  Generally accessed through the client through\n * `client.tune`, but can be instantiated directly if desired.\n *\n * This client allows tuning loras using assets created in AssetLibrary.\n */\nclass FineTuningClient {\n    constructor(client, endpoint) {\n        this.client = client;\n        if (!endpoint) {\n            endpoint = `${this.client.secureLink ? constants_1.SECURELINK_BASE_API : constants_1.DEFAULT_BASE_API}`;\n        }\n        this.endpoint = endpoint;\n    }\n    /**\n     * Get a single tune.\n     *\n     * @param id - The tune ID of the tune being requested.\n     *\n     * @throws {@link OctoAIValidationError} - if no token was found when creating\n     * the {@link Client} class, or if an empty string is provided for id.\n     */\n    async get(id) {\n        // Due to authorization not being required for public endpoints and\n        // the client importing the tune client, checks for authorization are ran\n        // instead when the client uses the API.\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        this.validateId(id);\n        const response = await fetch(this.endpoint + `/tune/${id}`, {\n            method: \"get\",\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        const jsonTune = await response.json();\n        return jsonTune;\n    }\n    /** @private */\n    validateName(name) {\n        const regex = new RegExp(\"^[a-zA-Z0-9_-]*$\");\n        if (!regex.test(name) || name === \"\") {\n            const msg = `name (${name}) is invalid.  Valid names may only contain alphanumeric, '-', or '_' characters.`;\n            throw new error_1.OctoAIValidationError(msg);\n        }\n    }\n    /**\n     * List tunes based on the search parameters provided.  Array of tunes can be\n     * accessed in response's `data` field.\n     *\n     * @remarks\n     * This method is used with the {@link ListTunesRequest} class to query\n     * the tunes and return.  If there are more tunes, the {@link ListTunesResponse}\n     * will return `true` for has_more as well as the `total` number of tunes.\n     *\n     * You can search by `name`, `tune_type` such as \"lora_tune\", `engine` such as\n     * \"image/controlnet-sdxl\", specific trigger words, set a `limit`, or\n     * start the next request at a certain `offset` for larger requests.\n     *\n     * An example of how to request your tunes for Stable Diffusion is below:\n     * ```\n     *   const client = new Client(process.env.OCTOAI_TOKEN);\n     *   const sdTunesResp = await client.tune.list({\n     *     engine: \"image/stable-diffusion-v1-5\",\n     *   });\n     *   const sdTunes = sdTunesResp.data;\n     * ```\n     *\n     * @param request - {@link ListTunesRequest} - parameters to use to filter\n     * tunes in response.\n     *\n     * @throws {@link OctoAIValidationError} if there isn't a token set in the client.\n     */\n    async list(request) {\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        if (request.name !== undefined) {\n            this.validateName(request.name);\n        }\n        const processedRequest = new ListTunesRequest(request);\n        const reqURL = this.endpoint +\n            \"/tunes?\" +\n            new URLSearchParams(processedRequest);\n        const response = await fetch(reqURL, {\n            method: \"GET\",\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        const responseJSON = await response.json();\n        return responseJSON;\n    }\n    /**\n     * Delete a tune.\n     *\n     * @param id - ID of tune to be deleted.\n     *\n     * @throws {@link OctoAIValidationError} if no token was found when creating\n     * the {@link Client} class or if id is invalid.\n     *\n     * @remarks\n     * Will throw client or server errors if the deletion requests fails.\n     */\n    async delete(id) {\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        this.validateId(id);\n        const response = await fetch(this.endpoint + `/tune/${id}`, {\n            method: \"DELETE\",\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n    }\n    /**\n     * Cancel a tune.\n     *\n     * @param id - ID of tune to be deleted.\n     *\n     * @throws {@link OctoAIValidationError} if no token was found when creating\n     * the {@link Client} class or if id is invalid.\n     *\n     * @remarks\n     * Will throw client or server errors if the cancellation request fails.\n     */\n    async cancel(id) {\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        this.validateId(id);\n        const response = await fetch(this.endpoint + `/tune/${id}/cancel`, {\n            method: \"POST\",\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n    }\n    /**\n     * Creates a finetuning job, then returns the {@link Tune}.\n     *\n     * @param request - {@link CreateTuneRequest}\n     *\n     * @throws {@link OctoAIValidationError} if no token was found when creating\n     * the {@link Client} class.\n     *\n     * @remarks\n     * This is used with {@link CreateTuneRequest}.  This method uses assets, such\n     * as files, created in {@link AssetLibrary} to tune a LoRA.\n     *\n     * A code snippet of how to use this method to create a Stable Diffusion V1.5\n     * LoRA is below:\n     * ```\n     *     import { Client, Asset } from \"@octoai/client\";\n     *\n     *     const client = new Client(process.env.OCTOAI_TOKEN);\n     *\n     *    const checkpoint = await (client.asset.list({\n     *         is_public: true,\n     *         owner: \"octoai\",\n     *         name: \"default-sd15\",\n     *     })).then(r => r.data[0]);\n     *\n     *    let assets: Asset[] = [];\n     *    // It's recommended tunes include at least 5 images\n     *    for (let i = 0; i < 2; i++) {\n     *        const asset = await client.asset.create({\n     *            name: `test_poodle_${i}`,\n     *            file: `test_assets/mitchi${i}.jpg`,\n     *            data: {file_format: \"jpg\"},\n     *            asset_type: \"file\",\n     *            description: \"an sks3 poodle\"\n     *        });\n     *        assets.push(asset);\n     *     }\n     *\n     *     console.log(JSON.stringify(assets, undefined, 4));\n     *\n     *     const tune = await client.tune.create({\n     *      name: \"test-sks3-poodle-sd15\",\n     *      description: \"sks3 poodle\",\n     *       details: {\n     *         base_checkpoint: checkpoint,\n     *         files: assets,\n     *         steps: 500,\n     *         tune_type: \"lora_tune\",\n     *         trigger_words: [\"sks3\"],\n     *      });\n     *\n     *     console.log(JSON.stringify(tune, undefined, 4));\n     * ```\n     */\n    async create(request) {\n        if (this.client.headers.Authorization === \"\") {\n            (0, error_1.throwOctoAITokenRequiredError)();\n        }\n        this.validateName(request.name);\n        const processedRequest = new CreateTuneRequest(request);\n        const response = await fetch(this.endpoint + \"/tune\", {\n            method: \"POST\",\n            body: JSON.stringify(processedRequest),\n            headers: this.client.headers,\n        });\n        if (!response.ok) {\n            await (0, error_1.throwOctoAIError)(response);\n        }\n        return (await response.json());\n    }\n    validateId(id) {\n        if (id === \"\") {\n            const msg = `A valid id is required.  Received an empty string.`;\n            throw new error_1.OctoAIValidationError(msg);\n        }\n    }\n}\nexports.FineTuningClient = FineTuningClient;\n/** @private */\nfunction validateTriggerWord(triggerWord) {\n    const error = new error_1.OctoAIValidationError(`There must be a trigger word containing characters.  Received: (${triggerWord})`);\n    if (triggerWord.length === 0) {\n        throw error;\n    }\n    if (triggerWord instanceof Array && triggerWord[0].length === 0) {\n        throw error;\n    }\n}\n/** @private */\nfunction validateFiles(files) {\n    if (files.length === 0) {\n        throw new error_1.OctoAIValidationError(\"Need at least one asset id in files to create a tune.\");\n    }\n}\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/lib/tune.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octoai/client/build/module/version.js":
/*!*************************************************************!*\
  !*** ./node_modules/@octoai/client/build/module/version.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LIB_VERSION = void 0;\nexports.LIB_VERSION = \"0.5.2\";\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFhLFFBQUEsV0FBVyxHQUFHLE9BQU8sQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9jdG9haS9jbGllbnQvYnVpbGQvbW9kdWxlL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLG1CQUFtQjtBQUNuQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvQG9jdG9haS9jbGllbnQvYnVpbGQvbW9kdWxlL3ZlcnNpb24uanM/M2RkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTElCX1ZFUlNJT04gPSB2b2lkIDA7XG5leHBvcnRzLkxJQl9WRVJTSU9OID0gXCIwLjUuMlwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZG1WeWMybHZiaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OTJaWEp6YVc5dUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGaExGRkJRVUVzVjBGQlZ5eEhRVUZITEU5QlFVOHNRMEZCUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octoai/client/build/module/version.js\n");

/***/ })

};
;