"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetLibrary = exports.ListAssetsRequest = exports.CreateAssetRequest = void 0;
const fs_1 = require("fs");
const client_s3_1 = require("@aws-sdk/client-s3");
const constants_1 = require("./constants");
const error_1 = require("./error");
/**
 * Request for creating an asset.
 *
 * @remarks
 * This is used with {@link AssetLibrary.create}.  The `data` field requires
 * data from the matching asset_type.  This includes {@link FileData},
 * {@link CheckpointData}, {@link LoraData}, {@link VAEData},
 * and {@link TextualInversionData}.
 */
class CreateAssetRequest {
    constructor(request) {
        this.asset_type = request.asset_type;
        this.data = request.data;
        this.name = request.name;
        this.description = request.description;
        const processedRequest = Object.keys(request).reduce((acc, key) => request[key] === undefined
            ? { ...acc }
            : { ...acc, [key]: request[key] }, {});
        Object.assign(this, processedRequest);
    }
}
exports.CreateAssetRequest = CreateAssetRequest;
class ListAssetsRequest {
    constructor(request) {
        const processedRequest = Object.keys(request).reduce((acc, key) => request[key] === undefined
            ? { ...acc }
            : { ...acc, [key]: request[key] }, {});
        Object.assign(this, processedRequest);
    }
}
exports.ListAssetsRequest = ListAssetsRequest;
/**
 * The AssetLibrary class.  Generally accessed through the client through
 * `client.asset`, but can be instantiated directly if a different endpoint is
 * desired.
 */
class AssetLibrary {
    constructor(client, endpoint) {
        this.client = client;
        if (!endpoint) {
            endpoint = `${this.client.secureLink ? constants_1.SECURELINK_BASE_API : constants_1.DEFAULT_BASE_API}/assets`;
        }
        this.endpoint = endpoint;
    }
    /**
     * Get a single asset.
     *
     * @param request - {@link GetAssetRequest} - includes either the name or the
     * id of the requested asset.
     *
     * @throws {@link OctoAIValidationError} - if no token was found when creating
     * the {@link Client} class, if neither an `id` nor `name` is provided, if both
     * are provided, or if the name or id provided is invalid.
     */
    async get(request) {
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        if (request.name === undefined && request.id === undefined) {
            throw new error_1.OctoAIValidationError("Either name or id must be provided.");
        }
        if (request.name !== undefined && request.id !== undefined) {
            throw new error_1.OctoAIValidationError("Only one of name or id may be provided.");
        }
        let nameOrId = "";
        if (request.name !== undefined) {
            nameOrId = request.name;
        }
        if (request.id !== undefined) {
            // To handle lint type checking, must be explicit
            nameOrId = request.id;
        }
        this.validateNameOrId(nameOrId);
        const response = await fetch(this.endpoint + `/${nameOrId}`, {
            method: "get",
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
        const jsonAsset = await response.json();
        return jsonAsset.asset;
    }
    /**
     * List assets based on the search parameters provided.  Array of assets can be
     * accessed in response's `data` field.
     *
     * @remarks
     * This method is used with the {@link ListAssetsRequest} class to query
     * the assets and return.  If there are more assets, the {@link ListAssetsResponse}
     * will return `true` for has_more as well as the `total` number of assets.
     *
     * You can search by `name`, `data_type` such as "fp16", set a `limit`, or
     * start the next request at a certain `offset` for larger requests.
     *
     * An example of how to request octoai public assets is below:
     * ```
     *   const client = new Client(process.env.OCTOAI_TOKEN);
     *   const octoAssets = await client.asset.list({
     *     is_public: true,
     *     owner: "octoai",
     *     engine: "image/stable-diffusion-v1-5",
     *     asset_type: "lora",
     *   });
     * ```
     *
     * @param request - {@link ListAssetsRequest} - parameters to use to filter
     * assets in response.
     *
     * @throws {@link OctoAIValidationError} if there isn't a token set in the client.
     */
    async list(request) {
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        const processedRequest = new ListAssetsRequest(request);
        const reqURL = this.endpoint +
            "?" +
            new URLSearchParams(processedRequest);
        const response = await fetch(reqURL, {
            method: "GET",
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
        const responseJSON = await response.json();
        return responseJSON;
    }
    /**
     * Delete an asset.
     *
     * @param id - ID of asset to be deleted.  Should start with `asset`.
     *
     * @throws {@link OctoAIValidationError} if no token was found when creating
     * the {@link Client} class or if id is invalid.
     */
    async delete(id) {
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        this.validateNameOrId(id);
        const response = await fetch(this.endpoint + `/${id}`, {
            method: "DELETE",
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
        return (await response.json());
    }
    /**
     * Creates and uploads asset, then returns the {@link Asset}.
     *
     * Will select the most efficient transfer_api_type if left undefined.
     *
     * @param request - {@link CreateAssetRequest}
     *
     * @throws {@link OctoAIValidationError} if no token was found when creating
     * the {@link Client} class.
     *
     * @remarks
     * This is used with {@link CreateAssetRequest}.  The `data` field requires
     * data from the matching asset_type.  This includes {@link FileData},
     * {@link CheckpointData}, {@link LoraData}, {@link VAEData},
     * and {@link TextualInversionData}.
     *
     * @example
     * Creating an asset from a local file:
     * ```ts
     * import { Client, LoraData } from "@octoai/client";
     *
     * const client = new Client(process.env.OCTOAI_TOKEN);
     *
     * const loraData = {
     *   asset_type: "lora",
     *   data_type: "fp16",
     *   engine: "image/stable-diffusion-v1-5",
     *   file_format: "safetensors",
     *   trigger_words: ["origami paper"],
     * } as LoraData;
     *
     * const createdAsset = await client.asset.create({
     *   file: "./test_assets/origami-paper.safetensors",
     *   asset_type: "lora",
     *   description: "origami paper lora",
     *   data: loraData,
     *   name: "origami-paper",
     *   is_public: false,
     * });
     * ```
     *
     * @example
     * Creating an asset via URL upload:
     * ```ts
     * import { Client, LoraData } from "@octoai/client";
     *
     * const client = new Client(process.env.OCTOAI_TOKEN);
     *
     * const loraData = {
     *   asset_type: "lora",
     *   data_type: "fp16",
     *   engine: "image/stable-diffusion-xl-v1-0",
     *   file_format: "safetensors",
     *   trigger_words: ["my trigger word"],
     * } as LoraData;
     *
     * const createdAsset = await client.asset.create({
     *   url: "<ASSET_DOWNLOAD_URL>",
     *   asset_type: "lora",
     *   description: "My SDXL LoRA",
     *   data: loraData,
     *   name: "my-sdxl-lora",
     *   is_public: false,
     * });
     * ```
     */
    async create(request) {
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        if (!request.file && !request.url) {
            throw new error_1.OctoAIValidationError("Either 'file' or 'url' must be provided.");
        }
        if (request.file && request.url) {
            throw new error_1.OctoAIValidationError("Only one of 'file' or 'url' may be provided.");
        }
        if (request.file) {
            const blob = await this.getBuffer(request.file);
            // Pick most efficient option based on file size if not self-selected
            if (!request.transfer_api_type) {
                if (blob.byteLength >= 52428800) {
                    request.transfer_api_type = "sts";
                }
                else {
                    request.transfer_api_type = "presigned-url";
                }
            }
            // Drop all undefined fields.
            // eslint-disable-next-line @typescript-eslint/no-unused-vars -- I wanna omit via spread
            const { file, ...processedRequest } = new CreateAssetRequest(request);
            const { asset, transfer_api } = await this.createAsset(processedRequest);
            if (request.transfer_api_type === "sts") {
                await this.uploadSts(transfer_api, blob);
            }
            if (request.transfer_api_type === "presigned-url") {
                await this.uploadPresigned(transfer_api, blob);
            }
            await this.completeUpload(asset.id);
            return this.get({ id: asset.id });
        }
        else {
            if (!request.url || !URL.canParse(request.url)) {
                throw new error_1.OctoAIValidationError("A valid URL must be provided.");
            }
            // eslint-disable-next-line @typescript-eslint/no-unused-vars -- I wanna omit via spread again
            const { file, ...processedRequest } = new CreateAssetRequest(request);
            const { asset } = await this.createAsset(processedRequest);
            return this.get({ id: asset.id });
        }
    }
    /**
     * Waits for an {@link Asset} to be ready to use. Useful when uploading assets via URL.
     *
     * @param asset - The {@link Asset} to poll.
     * @param options - Additional options for changing the poll interval and timeout durations.
     * @returns A ready {@link Asset}.
     *
     * @throws {@link OctoAIValidationError}
     * Thrown if the asset has an upload error or if the asset is rejected for safety.
     *
     * @throws {@link OctoAITimeoutError}
     * Thrown if the asset isn't ready by the specified timeout. Doesn't
     * necessarily indicate a failure.
     */
    async waitForReady(asset, options) {
        const { pollIntervalMs = 10000, timeoutMs = 900000 } = options ?? {};
        let assetCopy = { ...asset };
        const startMs = new Date().getTime();
        do {
            await new Promise((resolve) => setTimeout(resolve, pollIntervalMs));
            assetCopy = await this.get({ id: asset.id });
            if (assetCopy.status === "ready") {
                return assetCopy;
            }
            if (assetCopy.status === "error" || assetCopy.status === "rejected") {
                throw new error_1.OctoAIValidationError(`Error validating asset ${assetCopy.id}: ${assetCopy.status} ${assetCopy.status_details}`);
            }
        } while (new Date().getTime() < startMs + timeoutMs);
        throw new error_1.OctoAITimeoutError(`Asset '${assetCopy.id}' was not ready after ${timeoutMs} milliseconds`);
    }
    // Returns buffer from provided valid files, else throws a validation error.
    /** @private */
    async getBuffer(file) {
        try {
            if (file instanceof ArrayBuffer) {
                return Buffer.from(file);
            }
            if (file instanceof Buffer) {
                return file;
            }
            // Try running as a file path instead
            return (0, fs_1.readFileSync)(file);
        }
        catch (e) {
            throw new error_1.OctoAIValidationError(`File ${file} was unable to be processed as an ArrayBuffer, Buffer, or a valid filepath.  Please verify the validity of your file and try again.`);
        }
    }
    async createAsset(request) {
        const response = await fetch(this.endpoint, {
            method: "POST",
            body: JSON.stringify(request),
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
        return response.json();
    }
    // Posts the upload is done back to the API after file upload.
    // Used by create method.
    /** @private */
    async completeUpload(id) {
        const completionURL = this.endpoint + `/${id}/complete-upload`;
        const completeResponse = await fetch(completionURL, {
            method: "POST",
            body: JSON.stringify({}),
            headers: this.client.headers,
        });
        if (!completeResponse.ok) {
            await (0, error_1.throwOctoAIError)(completeResponse);
        }
    }
    // Uses the presigned API to upload a file.
    /** @private */
    async uploadPresigned(transferApi, blob) {
        const presignedResp = await fetch(transferApi.put_url, {
            method: "PUT",
            body: blob,
        });
        if (!presignedResp.ok) {
            throw new error_1.OctoAIServerError(`Error uploading file to server: ${presignedResp.statusText}`);
        }
    }
    // Uses the sts API to upload a file.
    /** @private */
    async uploadSts(transferApi, blob) {
        const s3 = new client_s3_1.S3({
            region: "us-east-1",
            credentials: {
                accessKeyId: transferApi.aws_access_key_id,
                secretAccessKey: transferApi.aws_secret_access_key,
                sessionToken: transferApi.aws_session_token,
            },
        });
        try {
            await s3.putObject({
                Bucket: transferApi.s3_bucket,
                Key: transferApi.s3_key,
                Body: blob,
            });
        }
        catch (e) {
            throw new error_1.OctoAIServerError(`Error uploading file to server: ${e}`);
        }
    }
    /** @private */
    validateNameOrId(nameOrId) {
        const regex = new RegExp("^[a-zA-Z0-9_-]*$");
        if (!regex.test(nameOrId)) {
            const msg = `name or id(${nameOrId}) is invalid.  Valid names or ids may only contain alphanumeric, '-', or '_' characters.`;
            throw new error_1.OctoAIValidationError(msg);
        }
    }
}
exports.AssetLibrary = AssetLibrary;
//# sourceMappingURL=data:application/json;base64,