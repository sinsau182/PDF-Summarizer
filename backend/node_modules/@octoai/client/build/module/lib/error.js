"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwOctoAITokenRequiredError = exports.throwOctoAIError = exports.OctoAITimeoutError = exports.OctoAIServerError = exports.OctoAIClientError = exports.OctoAIValidationError = void 0;
/**
 * A class of errors specific to the OctoAI TS SDK.
 */
class OctoAIError extends Error {
    /**
     * Parent class for OctoAI Errors used by the TS SDK.
     *
     * @param message - Message from server or client about cause of error.
     * @param causedBy - Error code of course error.  Usually HTTP errors.
     */
    constructor(message, causedBy) {
        super(message);
        this.name = this.constructor.name;
        this.causedBy = causedBy;
    }
}
/**
 * Client-side validation errors.  Problems with request caught before sending.
 */
class OctoAIValidationError extends OctoAIError {
}
exports.OctoAIValidationError = OctoAIValidationError;
/**
 * Client-side errors.  Indicated by HTTP codes from 400 through 499.
 */
class OctoAIClientError extends OctoAIError {
}
exports.OctoAIClientError = OctoAIClientError;
/**
 * Server-side errors.  Indicated by HTTP codes from 500 through 599.
 */
class OctoAIServerError extends OctoAIError {
}
exports.OctoAIServerError = OctoAIServerError;
/**
 * Timeout errors that don't necessarily indicate a client or server failure.
 */
class OctoAITimeoutError extends OctoAIError {
}
exports.OctoAITimeoutError = OctoAITimeoutError;
/**
 * Support method to create errors to throw on failures.
 *
 * @param response - the server response that isn't ok.
 */
async function throwOctoAIError(response) {
    const statusCode = response.status;
    let text = response.statusText;
    try {
        text += ": " + JSON.stringify(await response?.json());
    }
    catch (e) {
        // Response doesn't have JSON
    }
    let reqIDStr = "";
    const xUserRequestID = response.headers?.get("X-User-Request-ID");
    if (xUserRequestID !== null && xUserRequestID !== undefined) {
        reqIDStr = ` (request_id: ${response.headers.get("X-User-Request-ID")})`;
    }
    text += reqIDStr;
    if (statusCode >= 500) {
        throw new OctoAIServerError(`Server error: ${statusCode} ${text}`);
    }
    else if (statusCode === 429) {
        throw new OctoAIClientError(`Rate limit reached error: ${statusCode} ${text}`);
    }
    else {
        throw new OctoAIClientError(`Error: ${statusCode} ${text}`);
    }
}
exports.throwOctoAIError = throwOctoAIError;
/**
 * Standardized error message for requiring authorization.
 */
function throwOctoAITokenRequiredError() {
    const msg = "An OctoAI token is required to use this API.  Please " +
        "pass your OctoAI token to the client class during instantiation or set it " +
        "as an environment variable named `OCTOAI_TOKEN`.";
    throw new OctoAIValidationError(msg);
}
exports.throwOctoAITokenRequiredError = throwOctoAITokenRequiredError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Vycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOztHQUVHO0FBQ0gsTUFBTSxXQUFZLFNBQVEsS0FBSztJQUc3Qjs7Ozs7T0FLRztJQUNILFlBQVksT0FBZSxFQUFFLFFBQWdCO1FBQzNDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztDQUNGO0FBQ0Q7O0dBRUc7QUFDSCxNQUFhLHFCQUFzQixTQUFRLFdBQVc7Q0FBRztBQUF6RCxzREFBeUQ7QUFFekQ7O0dBRUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLFdBQVc7Q0FBRztBQUFyRCw4Q0FBcUQ7QUFFckQ7O0dBRUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLFdBQVc7Q0FBRztBQUFyRCw4Q0FBcUQ7QUFFckQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLFdBQVc7Q0FBRztBQUF0RCxnREFBc0Q7QUFFdEQ7Ozs7R0FJRztBQUNJLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxRQUFrQjtJQUN2RCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ25DLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDL0IsSUFBSSxDQUFDO1FBQ0gsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCw2QkFBNkI7SUFDL0IsQ0FBQztJQUNELElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNsQixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2xFLElBQUksY0FBYyxLQUFLLElBQUksSUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDNUQsUUFBUSxHQUFHLGlCQUFpQixRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUM7SUFDM0UsQ0FBQztJQUNELElBQUksSUFBSSxRQUFRLENBQUM7SUFDakIsSUFBSSxVQUFVLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdEIsTUFBTSxJQUFJLGlCQUFpQixDQUFDLGlCQUFpQixVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO1NBQU0sSUFBSSxVQUFVLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDOUIsTUFBTSxJQUFJLGlCQUFpQixDQUN6Qiw2QkFBNkIsVUFBVSxJQUFJLElBQUksRUFBRSxDQUNsRCxDQUFDO0lBQ0osQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLElBQUksaUJBQWlCLENBQUMsVUFBVSxVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDO0FBQ0gsQ0FBQztBQXZCRCw0Q0F1QkM7QUFFRDs7R0FFRztBQUNILFNBQWdCLDZCQUE2QjtJQUMzQyxNQUFNLEdBQUcsR0FDUCx1REFBdUQ7UUFDdkQsNEVBQTRFO1FBQzVFLGtEQUFrRCxDQUFDO0lBQ3JELE1BQU0sSUFBSSxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBTkQsc0VBTUMifQ==