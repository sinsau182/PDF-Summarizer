"use strict";
// FE uses @microsoft/fetch-event-source to deal with streaming,
// due to being a node-only SDK, coding another solution to return iterable
// of the specific type for the stream type instead.
// Adapted from https://github.com/openai/openai-node/blob/master/src/streaming.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = void 0;
const error_1 = require("./error");
class Stream {
    constructor(iterator, controller) {
        this.iterator = iterator;
        this.controller = controller;
    }
    // Expects full fetch response and will process to body / ReadableStream.
    // Controller can be a new AbortController(), set outside scope to allow user
    // to abort prematurely if required.
    static fromSSEResponse(response, controller) {
        let consumed = false;
        const decoder = new SSEDecoder();
        async function* iterMessages() {
            if (!response.body) {
                controller.abort();
                throw new error_1.OctoAIClientError("Attempted to iterate over a response with no body");
            }
            const lineDecoder = new LineDecoder();
            // Read lines similar to httpx behavior for streams
            const iterBytes = readableStreamAsyncIterable(response.body);
            for await (const chunk of iterBytes) {
                for (const line of lineDecoder.decode(chunk)) {
                    const sse = decoder.decode(line);
                    if (sse)
                        yield sse;
                }
            }
            for (const line of lineDecoder.flush()) {
                const sse = decoder.decode(line);
                if (sse)
                    yield sse;
            }
        }
        async function* iterator() {
            if (consumed) {
                throw new Error("Cannot iterate over a consumed stream.");
            }
            consumed = true;
            let done = false;
            try {
                for await (const sse of iterMessages()) {
                    if (done)
                        continue;
                    // Response sent to break json parsing
                    if (sse.data.startsWith("[DONE]")) {
                        done = true;
                        continue;
                    }
                    if (sse.event === null) {
                        let data;
                        try {
                            data = JSON.parse(sse.data);
                        }
                        catch (e) {
                            // Useful if streaming spontaneously breaks again
                            throw new error_1.OctoAIClientError(`Failed to parse message into JSON: ${sse.data} from chunk: ${sse.raw}`, e);
                        }
                        if (data && data.error) {
                            throw new error_1.OctoAIClientError(data, data.error);
                        }
                        yield data;
                    }
                }
                done = true;
            }
            catch (e) {
                // If `stream.controller.abort()` called, exit without throwing.
                if (e instanceof Error && e.name === "AbortError")
                    return;
                throw e;
            }
            finally {
                // If the user `break`s, abort the ongoing request.
                if (!done)
                    controller.abort();
            }
        }
        return new Stream(iterator, controller);
    }
    [Symbol.asyncIterator]() {
        return this.iterator();
    }
}
exports.Stream = Stream;
class SSEDecoder {
    constructor() {
        this.event = null;
        this.data = [];
        this.chunks = [];
    }
    decode(line) {
        if (line.endsWith("\r")) {
            line = line.substring(0, line.length - 1);
        }
        if (!line) {
            // empty line and we didn't previously encounter any messages
            if (!this.event && !this.data.length)
                return null;
            const sse = {
                event: this.event,
                data: this.data.join("\n"),
                raw: this.chunks,
            };
            this.event = null;
            this.data = [];
            this.chunks = [];
            return sse;
        }
        this.chunks.push(line);
        if (line.startsWith(":")) {
            return null;
        }
        const [fieldName, value] = partition(line, ":");
        if (fieldName === "event") {
            this.event = value;
        }
        else if (fieldName === "data") {
            this.data.push(value);
        }
        return null;
    }
}
/**
 * A re-implementation of httpx `LineDecoder` in Python that handles
 * incrementally reading lines from text.
 *
 * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258
 */
class LineDecoder {
    constructor() {
        this.buffer = [];
        this.trailingCR = false;
    }
    decode(chunk) {
        let text = this.decodeText(chunk);
        if (this.trailingCR) {
            text = "\r" + text;
            this.trailingCR = false;
        }
        if (text.endsWith("\r")) {
            this.trailingCR = true;
            text = text.slice(0, -1);
        }
        if (!text) {
            return [];
        }
        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || "");
        let lines = text.split(LineDecoder.NEWLINE_REGEXP);
        if (lines.length === 1 && !trailingNewline) {
            this.buffer.push(lines[0]);
            return [];
        }
        if (this.buffer.length > 0) {
            lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
            this.buffer = [];
        }
        if (!trailingNewline) {
            this.buffer = [lines.pop() || ""];
        }
        return lines;
    }
    decodeText(bytes) {
        if (bytes == null)
            return "";
        if (typeof bytes === "string")
            return bytes;
        // Node:
        if (typeof Buffer !== "undefined") {
            if (bytes instanceof Buffer) {
                return bytes.toString();
            }
            if (bytes instanceof Uint8Array) {
                return Buffer.from(bytes).toString();
            }
            throw new error_1.OctoAIClientError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node.`);
        }
        // Browser TextDecoder issue referred to above
        if (typeof TextDecoder !== "undefined") {
            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
                this.textDecoder ?? (this.textDecoder = new TextDecoder("utf8"));
                return this.textDecoder.decode(bytes);
            }
            throw new error_1.OctoAIClientError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);
        }
        throw new error_1.OctoAIClientError("Unexpected: Both Buffer and TextDecoder are unavailable as globals.");
    }
    flush() {
        if (!this.buffer.length && !this.trailingCR) {
            return [];
        }
        const lines = [this.buffer.join("")];
        this.buffer = [];
        this.trailingCR = false;
        return lines;
    }
}
LineDecoder.NEWLINE_CHARS = new Set(["\n", "\r", "\x85", "\u2028", "\u2029"]);
LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r\x85\u2028\u2029]/g;
function partition(str, delimiter) {
    const index = str.indexOf(delimiter);
    if (index !== -1) {
        let value = str.substring(index + delimiter.length);
        if (value.startsWith(" ")) {
            value = value.substring(1);
        }
        return [str.substring(0, index), value];
    }
    return [str, ""];
}
/**
 * Most browsers don't yet have async iterable support for ReadableStream,
 * and node reads bytes differently.
 *
 * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490
 */
function readableStreamAsyncIterable(stream) {
    if (stream[Symbol.asyncIterator])
        return stream;
    const reader = stream.getReader();
    return {
        async next() {
            try {
                const result = await reader.read();
                if (result?.done)
                    reader.releaseLock(); // release lock when stream becomes closed
                return result;
            }
            catch (e) {
                reader.releaseLock(); // release lock when stream becomes errored
                throw e;
            }
        },
        async return() {
            const cancelPromise = reader.cancel();
            reader.releaseLock();
            await cancelPromise;
            return { done: true, value: undefined };
        },
        [Symbol.asyncIterator]() {
            return this;
        },
    };
}
//# sourceMappingURL=data:application/json;base64,