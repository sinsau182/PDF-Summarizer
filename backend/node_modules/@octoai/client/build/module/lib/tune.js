"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FineTuningClient = exports.LoraTuneInput = exports.CreateTuneRequest = exports.ListTunesRequest = void 0;
const constants_1 = require("./constants");
const error_1 = require("./error");
class ListTunesRequest {
    constructor(request) {
        const processedRequest = Object.keys(request).reduce((acc, key) => request[key] === undefined || request[key] === null
            ? { ...acc }
            : { ...acc, [key]: request[key] }, {});
        Object.assign(this, processedRequest);
        if (typeof this.base_checkpoint !== "string" &&
            this.base_checkpoint !== undefined) {
            this.base_checkpoint = this.base_checkpoint.id;
        }
        if (this.trigger_words !== undefined) {
            validateTriggerWord(this.trigger_words);
        }
    }
}
exports.ListTunesRequest = ListTunesRequest;
/**
 * The create tune request.  If assets from the asset library are used to create
 * the files as a list or a string of asset_ids, then the caption will
 * automatically be set to trigger_words[0].
 */
class CreateTuneRequest {
    constructor(request) {
        const processedRequest = Object.keys(request).reduce((acc, key) => request[key] === undefined
            ? { ...acc }
            : { ...acc, [key]: request[key] }, {});
        Object.assign(this, processedRequest);
        this.details = new LoraTuneInput(request.details);
        this.name = request.name;
    }
}
exports.CreateTuneRequest = CreateTuneRequest;
class LoraTuneInput {
    constructor(details) {
        validateFiles(details.files);
        validateTriggerWord(details.trigger_words);
        const processedRequest = Object.keys(details).reduce((acc, key) => details[key] === undefined
            ? { ...acc }
            : { ...acc, [key]: details[key] }, {});
        Object.assign(this, processedRequest);
        // Is LoraTuneCheckpoint
        if (Object.prototype.hasOwnProperty.call(details.base_checkpoint, "checkpoint_id")) {
            this.base_checkpoint = details.base_checkpoint;
        }
        else {
            // Is Checkpoint Asset
            this.base_checkpoint = {
                checkpoint_id: details.base_checkpoint.id,
                engine: details.base_checkpoint.engine,
                name: details.base_checkpoint.name,
            };
        }
        // Convert assets to asset.ids
        if (Object.prototype.hasOwnProperty.call(details.files[0], "asset_type")) {
            const assets = details.files;
            const files = assets.map((asset) => ({
                file_id: asset.id,
                caption: details.trigger_words[0],
            }));
            this.files = files;
        }
        else if (typeof details.files[0] === "string") {
            const strings = details.files;
            const files = strings.map((assetId) => ({
                file_id: assetId,
                caption: details.trigger_words[0],
            }));
            this.files = files;
        }
        else {
            this.files = details.files;
        }
        this.steps = details.steps;
        this.trigger_words = details.trigger_words;
    }
}
exports.LoraTuneInput = LoraTuneInput;
/**
 * The FineTuningClient class.  Generally accessed through the client through
 * `client.tune`, but can be instantiated directly if desired.
 *
 * This client allows tuning loras using assets created in AssetLibrary.
 */
class FineTuningClient {
    constructor(client, endpoint) {
        this.client = client;
        if (!endpoint) {
            endpoint = `${this.client.secureLink ? constants_1.SECURELINK_BASE_API : constants_1.DEFAULT_BASE_API}`;
        }
        this.endpoint = endpoint;
    }
    /**
     * Get a single tune.
     *
     * @param id - The tune ID of the tune being requested.
     *
     * @throws {@link OctoAIValidationError} - if no token was found when creating
     * the {@link Client} class, or if an empty string is provided for id.
     */
    async get(id) {
        // Due to authorization not being required for public endpoints and
        // the client importing the tune client, checks for authorization are ran
        // instead when the client uses the API.
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        this.validateId(id);
        const response = await fetch(this.endpoint + `/tune/${id}`, {
            method: "get",
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
        const jsonTune = await response.json();
        return jsonTune;
    }
    /** @private */
    validateName(name) {
        const regex = new RegExp("^[a-zA-Z0-9_-]*$");
        if (!regex.test(name) || name === "") {
            const msg = `name (${name}) is invalid.  Valid names may only contain alphanumeric, '-', or '_' characters.`;
            throw new error_1.OctoAIValidationError(msg);
        }
    }
    /**
     * List tunes based on the search parameters provided.  Array of tunes can be
     * accessed in response's `data` field.
     *
     * @remarks
     * This method is used with the {@link ListTunesRequest} class to query
     * the tunes and return.  If there are more tunes, the {@link ListTunesResponse}
     * will return `true` for has_more as well as the `total` number of tunes.
     *
     * You can search by `name`, `tune_type` such as "lora_tune", `engine` such as
     * "image/controlnet-sdxl", specific trigger words, set a `limit`, or
     * start the next request at a certain `offset` for larger requests.
     *
     * An example of how to request your tunes for Stable Diffusion is below:
     * ```
     *   const client = new Client(process.env.OCTOAI_TOKEN);
     *   const sdTunesResp = await client.tune.list({
     *     engine: "image/stable-diffusion-v1-5",
     *   });
     *   const sdTunes = sdTunesResp.data;
     * ```
     *
     * @param request - {@link ListTunesRequest} - parameters to use to filter
     * tunes in response.
     *
     * @throws {@link OctoAIValidationError} if there isn't a token set in the client.
     */
    async list(request) {
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        if (request.name !== undefined) {
            this.validateName(request.name);
        }
        const processedRequest = new ListTunesRequest(request);
        const reqURL = this.endpoint +
            "/tunes?" +
            new URLSearchParams(processedRequest);
        const response = await fetch(reqURL, {
            method: "GET",
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
        const responseJSON = await response.json();
        return responseJSON;
    }
    /**
     * Delete a tune.
     *
     * @param id - ID of tune to be deleted.
     *
     * @throws {@link OctoAIValidationError} if no token was found when creating
     * the {@link Client} class or if id is invalid.
     *
     * @remarks
     * Will throw client or server errors if the deletion requests fails.
     */
    async delete(id) {
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        this.validateId(id);
        const response = await fetch(this.endpoint + `/tune/${id}`, {
            method: "DELETE",
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
    }
    /**
     * Cancel a tune.
     *
     * @param id - ID of tune to be deleted.
     *
     * @throws {@link OctoAIValidationError} if no token was found when creating
     * the {@link Client} class or if id is invalid.
     *
     * @remarks
     * Will throw client or server errors if the cancellation request fails.
     */
    async cancel(id) {
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        this.validateId(id);
        const response = await fetch(this.endpoint + `/tune/${id}/cancel`, {
            method: "POST",
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
    }
    /**
     * Creates a finetuning job, then returns the {@link Tune}.
     *
     * @param request - {@link CreateTuneRequest}
     *
     * @throws {@link OctoAIValidationError} if no token was found when creating
     * the {@link Client} class.
     *
     * @remarks
     * This is used with {@link CreateTuneRequest}.  This method uses assets, such
     * as files, created in {@link AssetLibrary} to tune a LoRA.
     *
     * A code snippet of how to use this method to create a Stable Diffusion V1.5
     * LoRA is below:
     * ```
     *     import { Client, Asset } from "@octoai/client";
     *
     *     const client = new Client(process.env.OCTOAI_TOKEN);
     *
     *    const checkpoint = await (client.asset.list({
     *         is_public: true,
     *         owner: "octoai",
     *         name: "default-sd15",
     *     })).then(r => r.data[0]);
     *
     *    let assets: Asset[] = [];
     *    // It's recommended tunes include at least 5 images
     *    for (let i = 0; i < 2; i++) {
     *        const asset = await client.asset.create({
     *            name: `test_poodle_${i}`,
     *            file: `test_assets/mitchi${i}.jpg`,
     *            data: {file_format: "jpg"},
     *            asset_type: "file",
     *            description: "an sks3 poodle"
     *        });
     *        assets.push(asset);
     *     }
     *
     *     console.log(JSON.stringify(assets, undefined, 4));
     *
     *     const tune = await client.tune.create({
     *      name: "test-sks3-poodle-sd15",
     *      description: "sks3 poodle",
     *       details: {
     *         base_checkpoint: checkpoint,
     *         files: assets,
     *         steps: 500,
     *         tune_type: "lora_tune",
     *         trigger_words: ["sks3"],
     *      });
     *
     *     console.log(JSON.stringify(tune, undefined, 4));
     * ```
     */
    async create(request) {
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        this.validateName(request.name);
        const processedRequest = new CreateTuneRequest(request);
        const response = await fetch(this.endpoint + "/tune", {
            method: "POST",
            body: JSON.stringify(processedRequest),
            headers: this.client.headers,
        });
        if (!response.ok) {
            await (0, error_1.throwOctoAIError)(response);
        }
        return (await response.json());
    }
    validateId(id) {
        if (id === "") {
            const msg = `A valid id is required.  Received an empty string.`;
            throw new error_1.OctoAIValidationError(msg);
        }
    }
}
exports.FineTuningClient = FineTuningClient;
/** @private */
function validateTriggerWord(triggerWord) {
    const error = new error_1.OctoAIValidationError(`There must be a trigger word containing characters.  Received: (${triggerWord})`);
    if (triggerWord.length === 0) {
        throw error;
    }
    if (triggerWord instanceof Array && triggerWord[0].length === 0) {
        throw error;
    }
}
/** @private */
function validateFiles(files) {
    if (files.length === 0) {
        throw new error_1.OctoAIValidationError("Need at least one asset id in files to create a tune.");
    }
}
//# sourceMappingURL=data:application/json;base64,